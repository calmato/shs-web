/* tslint:disable */
/* eslint-disable */
/**
 * SHS Web
 * 管理者・講師用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 講師ID
     * @type {string}
     * @memberof AuthResponse
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof AuthResponse
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof AuthResponse
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof AuthResponse
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof AuthResponse
     */
    'firstNameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof AuthResponse
     */
    'mail'?: string;
    /**
     * 権限 (0:不明, 1:講師, 2:管理者)
     * @type {number}
     * @memberof AuthResponse
     */
    'role'?: number;
    /**
     * 
     * @type {AuthResponseSubjects}
     * @memberof AuthResponse
     */
    'subjects'?: AuthResponseSubjects;
}
/**
 * 担当教科一覧(Map)
 * @export
 * @interface AuthResponseSubjects
 */
export interface AuthResponseSubjects {
    /**
     * 担当教科一覧(小学校)
     * @type {Array<AuthResponseSubjects1>}
     * @memberof AuthResponseSubjects
     */
    '1'?: Array<AuthResponseSubjects1>;
    /**
     * 担当教科一覧(中学校)
     * @type {Array<AuthResponseSubjects1>}
     * @memberof AuthResponseSubjects
     */
    '2'?: Array<AuthResponseSubjects1>;
    /**
     * 担当教科一覧(高等学校)
     * @type {Array<AuthResponseSubjects1>}
     * @memberof AuthResponseSubjects
     */
    '3'?: Array<AuthResponseSubjects1>;
}
/**
 * 
 * @export
 * @interface AuthResponseSubjects1
 */
export interface AuthResponseSubjects1 {
    /**
     * 授業科目ID
     * @type {number}
     * @memberof AuthResponseSubjects1
     */
    'id'?: number;
    /**
     * 授業科目名
     * @type {string}
     * @memberof AuthResponseSubjects1
     */
    'name'?: string;
    /**
     * 表示色
     * @type {string}
     * @memberof AuthResponseSubjects1
     */
    'color'?: string;
    /**
     * 校種
     * @type {number}
     * @memberof AuthResponseSubjects1
     */
    'schoolType'?: number;
    /**
     * 登録日時
     * @type {string}
     * @memberof AuthResponseSubjects1
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof AuthResponseSubjects1
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface CreateLessonRequest
 */
export interface CreateLessonRequest {
    /**
     * 授業スケジュールID
     * @type {number}
     * @memberof CreateLessonRequest
     */
    'shiftId'?: number;
    /**
     * 授業科目ID
     * @type {number}
     * @memberof CreateLessonRequest
     */
    'subjectId'?: number;
    /**
     * 教室番号
     * @type {number}
     * @memberof CreateLessonRequest
     */
    'room'?: number;
    /**
     * 講師ID
     * @type {string}
     * @memberof CreateLessonRequest
     */
    'teacherId'?: string;
    /**
     * 生徒ID
     * @type {string}
     * @memberof CreateLessonRequest
     */
    'studentId'?: string;
}
/**
 * 
 * @export
 * @interface CreateShiftsRequest
 */
export interface CreateShiftsRequest {
    /**
     * シフト募集年月
     * @type {string}
     * @memberof CreateShiftsRequest
     */
    'yearMonth'?: string;
    /**
     * シフト募集開始日
     * @type {string}
     * @memberof CreateShiftsRequest
     */
    'openDate'?: string;
    /**
     * シフト募集締切日
     * @type {string}
     * @memberof CreateShiftsRequest
     */
    'endDate'?: string;
    /**
     * 休講日
     * @type {Array<string>}
     * @memberof CreateShiftsRequest
     */
    'closedDates'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateStudentRequest
 */
export interface CreateStudentRequest {
    /**
     * 姓
     * @type {string}
     * @memberof CreateStudentRequest
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof CreateStudentRequest
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof CreateStudentRequest
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof CreateStudentRequest
     */
    'firstNameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof CreateStudentRequest
     */
    'mail'?: string;
    /**
     * 校種(1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof CreateStudentRequest
     */
    'schoolType'?: number;
    /**
     * 学年
     * @type {number}
     * @memberof CreateStudentRequest
     */
    'grade'?: number;
    /**
     * パスワード
     * @type {string}
     * @memberof CreateStudentRequest
     */
    'password'?: string;
    /**
     * パスワード(確認用)
     * @type {string}
     * @memberof CreateStudentRequest
     */
    'passwordConfirmation'?: string;
}
/**
 * 
 * @export
 * @interface CreateSubjectRequest
 */
export interface CreateSubjectRequest {
    /**
     * 授業科目名
     * @type {string}
     * @memberof CreateSubjectRequest
     */
    'name'?: string;
    /**
     * 表示色
     * @type {string}
     * @memberof CreateSubjectRequest
     */
    'color'?: string;
    /**
     * 校種 (1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof CreateSubjectRequest
     */
    'schoolType'?: number;
}
/**
 * 
 * @export
 * @interface CreateTeacherRequest
 */
export interface CreateTeacherRequest {
    /**
     * 姓
     * @type {string}
     * @memberof CreateTeacherRequest
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof CreateTeacherRequest
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof CreateTeacherRequest
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof CreateTeacherRequest
     */
    'firstNameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof CreateTeacherRequest
     */
    'mail'?: string;
    /**
     * 権限 (1:講師, 2:管理者)
     * @type {number}
     * @memberof CreateTeacherRequest
     */
    'role'?: number;
    /**
     * パスワード
     * @type {string}
     * @memberof CreateTeacherRequest
     */
    'password'?: string;
    /**
     * パスワード
     * @type {string}
     * @memberof CreateTeacherRequest
     */
    'passwordConfirmation'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * ステータスコード
     * @type {number}
     * @memberof ErrorResponse
     */
    'status'?: number;
    /**
     * エラー概要
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
    /**
     * エラー詳細
     * @type {string}
     * @memberof ErrorResponse
     */
    'details'?: string;
}
/**
 * 
 * @export
 * @interface LessonResponse
 */
export interface LessonResponse {
    /**
     * 授業ID
     * @type {number}
     * @memberof LessonResponse
     */
    'id'?: number;
    /**
     * 授業スケジュールID
     * @type {number}
     * @memberof LessonResponse
     */
    'shiftId'?: number;
    /**
     * 授業科目ID
     * @type {number}
     * @memberof LessonResponse
     */
    'subjectId'?: number;
    /**
     * 教室番号
     * @type {number}
     * @memberof LessonResponse
     */
    'room'?: number;
    /**
     * 講師ID
     * @type {string}
     * @memberof LessonResponse
     */
    'teacherId'?: string;
    /**
     * 生徒ID
     * @type {string}
     * @memberof LessonResponse
     */
    'studentId'?: string;
    /**
     * 授業開始日時
     * @type {string}
     * @memberof LessonResponse
     */
    'startAt'?: string;
    /**
     * 授業終了日時
     * @type {string}
     * @memberof LessonResponse
     */
    'endAt'?: string;
    /**
     * 備考
     * @type {string}
     * @memberof LessonResponse
     */
    'notes'?: string;
    /**
     * 登録日時
     * @type {string}
     * @memberof LessonResponse
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof LessonResponse
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface LessonsResponse
 */
export interface LessonsResponse {
    /**
     * 授業一覧
     * @type {Array<ShiftsResponseLessons1>}
     * @memberof LessonsResponse
     */
    'lessons'?: Array<ShiftsResponseLessons1>;
    /**
     * 講師一覧
     * @type {Array<TeachersResponseTeachers>}
     * @memberof LessonsResponse
     */
    'teachers'?: Array<TeachersResponseTeachers>;
    /**
     * 生徒一覧
     * @type {Array<StudentsResponseStudents>}
     * @memberof LessonsResponse
     */
    'students'?: Array<StudentsResponseStudents>;
}
/**
 * 
 * @export
 * @interface RoomsTotalResponse
 */
export interface RoomsTotalResponse {
    /**
     * 教室数
     * @type {number}
     * @memberof RoomsTotalResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface SchedulesResponse
 */
export interface SchedulesResponse {
    /**
     * 曜日ごとのスケジュール一覧
     * @type {Array<SchedulesResponseSchedules>}
     * @memberof SchedulesResponse
     */
    'schedules'?: Array<SchedulesResponseSchedules>;
}
/**
 * 
 * @export
 * @interface SchedulesResponseLessons
 */
export interface SchedulesResponseLessons {
    /**
     * 授業開始時間
     * @type {string}
     * @memberof SchedulesResponseLessons
     */
    'startTime'?: string;
    /**
     * 授業終了時間
     * @type {string}
     * @memberof SchedulesResponseLessons
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface SchedulesResponseSchedules
 */
export interface SchedulesResponseSchedules {
    /**
     * 曜日 (0:日曜日, 1:月曜日, ..., 6:土曜日)
     * @type {number}
     * @memberof SchedulesResponseSchedules
     */
    'weekday'?: number;
    /**
     * 休校フラグ
     * @type {boolean}
     * @memberof SchedulesResponseSchedules
     */
    'isClosed'?: boolean;
    /**
     * 授業コマ一覧
     * @type {Array<SchedulesResponseLessons>}
     * @memberof SchedulesResponseSchedules
     */
    'lessons'?: Array<SchedulesResponseLessons>;
}
/**
 * 
 * @export
 * @interface ShiftLessonsResponse
 */
export interface ShiftLessonsResponse {
    /**
     * 授業一覧
     * @type {Array<ShiftsResponseLessons1>}
     * @memberof ShiftLessonsResponse
     */
    'lessons'?: Array<ShiftsResponseLessons1>;
    /**
     * 授業合計数
     * @type {number}
     * @memberof ShiftLessonsResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ShiftSubmissionsResponse
 */
export interface ShiftSubmissionsResponse {
    /**
     * 出勤可能講師一覧
     * @type {Array<TeachersResponseTeachers>}
     * @memberof ShiftSubmissionsResponse
     */
    'teachers'?: Array<TeachersResponseTeachers>;
    /**
     * 授業希望生徒一覧
     * @type {Array<ShiftSubmissionsResponseStudents>}
     * @memberof ShiftSubmissionsResponse
     */
    'students'?: Array<ShiftSubmissionsResponseStudents>;
    /**
     * 授業一覧
     * @type {Array<ShiftsResponseLessons1>}
     * @memberof ShiftSubmissionsResponse
     */
    'lessons'?: Array<ShiftsResponseLessons1>;
}
/**
 * 
 * @export
 * @interface ShiftSubmissionsResponseStudents
 */
export interface ShiftSubmissionsResponseStudents {
    /**
     * 生徒ID
     * @type {string}
     * @memberof ShiftSubmissionsResponseStudents
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof ShiftSubmissionsResponseStudents
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof ShiftSubmissionsResponseStudents
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof ShiftSubmissionsResponseStudents
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof ShiftSubmissionsResponseStudents
     */
    'firstNameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof ShiftSubmissionsResponseStudents
     */
    'mail'?: string;
    /**
     * 校種 (1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof ShiftSubmissionsResponseStudents
     */
    'schoolType'?: number;
    /**
     * 学年
     * @type {number}
     * @memberof ShiftSubmissionsResponseStudents
     */
    'grade'?: number;
    /**
     * 登録日時
     * @type {string}
     * @memberof ShiftSubmissionsResponseStudents
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof ShiftSubmissionsResponseStudents
     */
    'updatedAt'?: string;
    /**
     * 担当教科一覧
     * @type {Array<AuthResponseSubjects1>}
     * @memberof ShiftSubmissionsResponseStudents
     */
    'subjects'?: Array<AuthResponseSubjects1>;
}
/**
 * 
 * @export
 * @interface ShiftSummariesResponse
 */
export interface ShiftSummariesResponse {
    /**
     * シフト募集概要一覧
     * @type {Array<ShiftSummariesResponseSummaries>}
     * @memberof ShiftSummariesResponse
     */
    'summaries'?: Array<ShiftSummariesResponseSummaries>;
}
/**
 * 
 * @export
 * @interface ShiftSummariesResponseSummaries
 */
export interface ShiftSummariesResponseSummaries {
    /**
     * シフト募集概要ID
     * @type {number}
     * @memberof ShiftSummariesResponseSummaries
     */
    'id'?: number;
    /**
     * 年
     * @type {number}
     * @memberof ShiftSummariesResponseSummaries
     */
    'year'?: number;
    /**
     * 月
     * @type {number}
     * @memberof ShiftSummariesResponseSummaries
     */
    'month'?: number;
    /**
     * 授業スケジュール確定フラグ
     * @type {boolean}
     * @memberof ShiftSummariesResponseSummaries
     */
    'decided'?: boolean;
    /**
     * シフト募集ステータス (0:不明, 1:募集前, 2:受付中, 3:締切後)
     * @type {number}
     * @memberof ShiftSummariesResponseSummaries
     */
    'status'?: number;
    /**
     * シフト募集開始日時
     * @type {string}
     * @memberof ShiftSummariesResponseSummaries
     */
    'openAt'?: string;
    /**
     * シフト募集締切日時
     * @type {string}
     * @memberof ShiftSummariesResponseSummaries
     */
    'endAt'?: string;
    /**
     * 登録日時
     * @type {string}
     * @memberof ShiftSummariesResponseSummaries
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof ShiftSummariesResponseSummaries
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ShiftsResponse
 */
export interface ShiftsResponse {
    /**
     * 
     * @type {ShiftsResponseSummary}
     * @memberof ShiftsResponse
     */
    'summary'?: ShiftsResponseSummary;
    /**
     * 日毎の募集シフト一覧
     * @type {Array<ShiftsResponseShifts>}
     * @memberof ShiftsResponse
     */
    'shifts'?: Array<ShiftsResponseShifts>;
    /**
     * 教室数
     * @type {number}
     * @memberof ShiftsResponse
     */
    'rooms'?: number;
    /**
     * 講師サマリ一覧
     * @type {Array<ShiftsResponseTeachers>}
     * @memberof ShiftsResponse
     */
    'teachers'?: Array<ShiftsResponseTeachers>;
    /**
     * 生徒サマリ一覧
     * @type {Array<ShiftsResponseStudents>}
     * @memberof ShiftsResponse
     */
    'students'?: Array<ShiftsResponseStudents>;
    /**
     * 授業一覧
     * @type {Array<ShiftsResponseLessons1>}
     * @memberof ShiftsResponse
     */
    'lessons'?: Array<ShiftsResponseLessons1>;
}
/**
 * 
 * @export
 * @interface ShiftsResponseLessons
 */
export interface ShiftsResponseLessons {
    /**
     * 授業コマID
     * @type {number}
     * @memberof ShiftsResponseLessons
     */
    'id'?: number;
    /**
     * 授業開始時間
     * @type {string}
     * @memberof ShiftsResponseLessons
     */
    'startTime'?: string;
    /**
     * 授業終了時間
     * @type {string}
     * @memberof ShiftsResponseLessons
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface ShiftsResponseLessons1
 */
export interface ShiftsResponseLessons1 {
    /**
     * 授業ID
     * @type {number}
     * @memberof ShiftsResponseLessons1
     */
    'id'?: number;
    /**
     * 授業スケジュールID
     * @type {number}
     * @memberof ShiftsResponseLessons1
     */
    'shiftId'?: number;
    /**
     * 授業科目ID
     * @type {number}
     * @memberof ShiftsResponseLessons1
     */
    'subjectId'?: number;
    /**
     * 教室番号
     * @type {number}
     * @memberof ShiftsResponseLessons1
     */
    'room'?: number;
    /**
     * 講師ID
     * @type {string}
     * @memberof ShiftsResponseLessons1
     */
    'teacherId'?: string;
    /**
     * 生徒ID
     * @type {string}
     * @memberof ShiftsResponseLessons1
     */
    'studentId'?: string;
    /**
     * 授業開始日時
     * @type {string}
     * @memberof ShiftsResponseLessons1
     */
    'startAt'?: string;
    /**
     * 授業終了日時
     * @type {string}
     * @memberof ShiftsResponseLessons1
     */
    'endAt'?: string;
    /**
     * 備考
     * @type {string}
     * @memberof ShiftsResponseLessons1
     */
    'notes'?: string;
    /**
     * 登録日時
     * @type {string}
     * @memberof ShiftsResponseLessons1
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof ShiftsResponseLessons1
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ShiftsResponseShifts
 */
export interface ShiftsResponseShifts {
    /**
     * 授業日
     * @type {string}
     * @memberof ShiftsResponseShifts
     */
    'date'?: string;
    /**
     * 休校フラグ
     * @type {boolean}
     * @memberof ShiftsResponseShifts
     */
    'isClosed'?: boolean;
    /**
     * 授業コマ一覧
     * @type {Array<ShiftsResponseLessons>}
     * @memberof ShiftsResponseShifts
     */
    'lessons'?: Array<ShiftsResponseLessons>;
}
/**
 * 生徒詳細
 * @export
 * @interface ShiftsResponseStudent
 */
export interface ShiftsResponseStudent {
    /**
     * 生徒ID
     * @type {string}
     * @memberof ShiftsResponseStudent
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof ShiftsResponseStudent
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof ShiftsResponseStudent
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof ShiftsResponseStudent
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof ShiftsResponseStudent
     */
    'firstNameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof ShiftsResponseStudent
     */
    'mail'?: string;
    /**
     * 校種 (1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof ShiftsResponseStudent
     */
    'schoolType'?: number;
    /**
     * 学年
     * @type {number}
     * @memberof ShiftsResponseStudent
     */
    'grade'?: number;
    /**
     * 登録日時
     * @type {string}
     * @memberof ShiftsResponseStudent
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof ShiftsResponseStudent
     */
    'updatedAt'?: string;
    /**
     * 担当教科一覧
     * @type {Array<AuthResponseSubjects1>}
     * @memberof ShiftsResponseStudent
     */
    'subjects'?: Array<AuthResponseSubjects1>;
}
/**
 * 
 * @export
 * @interface ShiftsResponseStudents
 */
export interface ShiftsResponseStudents {
    /**
     * 
     * @type {ShiftsResponseStudent}
     * @memberof ShiftsResponseStudents
     */
    'student'?: ShiftsResponseStudent;
    /**
     * 授業希望提出フラグ
     * @type {boolean}
     * @memberof ShiftsResponseStudents
     */
    'isSubmit'?: boolean;
    /**
     * 受講希望授業一覧
     * @type {Array<ShiftsResponseSuggestedLessons>}
     * @memberof ShiftsResponseStudents
     */
    'suggestedLessons'?: Array<ShiftsResponseSuggestedLessons>;
    /**
     * 受講希望数合計
     * @type {number}
     * @memberof ShiftsResponseStudents
     */
    'suggestedLessonsTotal'?: number;
    /**
     * 担当授業数
     * @type {number}
     * @memberof ShiftsResponseStudents
     */
    'lessonTotal'?: number;
}
/**
 * 
 * @export
 * @interface ShiftsResponseSuggestedLessons
 */
export interface ShiftsResponseSuggestedLessons {
    /**
     * 授業科目ID
     * @type {number}
     * @memberof ShiftsResponseSuggestedLessons
     */
    'subjectId'?: number;
    /**
     * 希望数
     * @type {number}
     * @memberof ShiftsResponseSuggestedLessons
     */
    'total'?: number;
}
/**
 * シフト募集概要
 * @export
 * @interface ShiftsResponseSummary
 */
export interface ShiftsResponseSummary {
    /**
     * シフト募集ID
     * @type {number}
     * @memberof ShiftsResponseSummary
     */
    'id'?: number;
    /**
     * 年
     * @type {number}
     * @memberof ShiftsResponseSummary
     */
    'year'?: number;
    /**
     * 月
     * @type {number}
     * @memberof ShiftsResponseSummary
     */
    'month'?: number;
    /**
     * 授業スケジュール確定フラグ
     * @type {boolean}
     * @memberof ShiftsResponseSummary
     */
    'decided'?: boolean;
    /**
     * シフト募集ステータス (0:不明, 1:募集前, 2:受付中, 3:締切後)
     * @type {number}
     * @memberof ShiftsResponseSummary
     */
    'status'?: number;
    /**
     * シフト募集開始日時
     * @type {string}
     * @memberof ShiftsResponseSummary
     */
    'openAt'?: string;
    /**
     * シフト募集締切日時
     * @type {string}
     * @memberof ShiftsResponseSummary
     */
    'endAt'?: string;
    /**
     * 登録日時
     * @type {string}
     * @memberof ShiftsResponseSummary
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof ShiftsResponseSummary
     */
    'updatedAt'?: string;
}
/**
 * 講師詳細
 * @export
 * @interface ShiftsResponseTeacher
 */
export interface ShiftsResponseTeacher {
    /**
     * 講師ID
     * @type {string}
     * @memberof ShiftsResponseTeacher
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof ShiftsResponseTeacher
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof ShiftsResponseTeacher
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof ShiftsResponseTeacher
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof ShiftsResponseTeacher
     */
    'firstNameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof ShiftsResponseTeacher
     */
    'mail'?: string;
    /**
     * 権限 (0:不明, 1:講師, 2:管理者)
     * @type {number}
     * @memberof ShiftsResponseTeacher
     */
    'role'?: number;
    /**
     * 登録日時
     * @type {string}
     * @memberof ShiftsResponseTeacher
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof ShiftsResponseTeacher
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {AuthResponseSubjects}
     * @memberof ShiftsResponseTeacher
     */
    'subjects'?: AuthResponseSubjects;
}
/**
 * 
 * @export
 * @interface ShiftsResponseTeachers
 */
export interface ShiftsResponseTeachers {
    /**
     * 
     * @type {ShiftsResponseTeacher}
     * @memberof ShiftsResponseTeachers
     */
    'teacher'?: ShiftsResponseTeacher;
    /**
     * シフト提出フラグ
     * @type {boolean}
     * @memberof ShiftsResponseTeachers
     */
    'isSubmit'?: boolean;
    /**
     * 担当授業数
     * @type {number}
     * @memberof ShiftsResponseTeachers
     */
    'lessonTotal'?: number;
}
/**
 * 
 * @export
 * @interface StudentResponse
 */
export interface StudentResponse {
    /**
     * 生徒ID
     * @type {string}
     * @memberof StudentResponse
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof StudentResponse
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof StudentResponse
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof StudentResponse
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof StudentResponse
     */
    'firstNamaKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof StudentResponse
     */
    'mail'?: string;
    /**
     * 作成日時
     * @type {number}
     * @memberof StudentResponse
     */
    'createdAt'?: number;
    /**
     * 更新日時
     * @type {number}
     * @memberof StudentResponse
     */
    'updatedAt'?: number;
    /**
     * 校種(0:不明, 1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof StudentResponse
     */
    'schoolType'?: number;
    /**
     * 学年
     * @type {number}
     * @memberof StudentResponse
     */
    'grade'?: number;
    /**
     * 受講科目一覧
     * @type {Array<AuthResponseSubjects1>}
     * @memberof StudentResponse
     */
    'subjects'?: Array<AuthResponseSubjects1>;
}
/**
 * 
 * @export
 * @interface StudentShiftsResponse
 */
export interface StudentShiftsResponse {
    /**
     * 
     * @type {StudentShiftsResponseSummary}
     * @memberof StudentShiftsResponse
     */
    'summary'?: StudentShiftsResponseSummary;
    /**
     * 日毎の授業希望募集一覧
     * @type {Array<StudentShiftsResponseShifts>}
     * @memberof StudentShiftsResponse
     */
    'shifts'?: Array<StudentShiftsResponseShifts>;
    /**
     * 科目毎の授業希望情報
     * @type {Array<StudentShiftsResponseSuggestedLessons>}
     * @memberof StudentShiftsResponse
     */
    'suggestedLessons'?: Array<StudentShiftsResponseSuggestedLessons>;
}
/**
 * 
 * @export
 * @interface StudentShiftsResponseLessons
 */
export interface StudentShiftsResponseLessons {
    /**
     * 授業コマID
     * @type {number}
     * @memberof StudentShiftsResponseLessons
     */
    'id'?: number;
    /**
     * 授業希望フラグ
     * @type {boolean}
     * @memberof StudentShiftsResponseLessons
     */
    'enabled'?: boolean;
    /**
     * 授業開始時間
     * @type {string}
     * @memberof StudentShiftsResponseLessons
     */
    'startTime'?: string;
    /**
     * 授業終了時間
     * @type {string}
     * @memberof StudentShiftsResponseLessons
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface StudentShiftsResponseShifts
 */
export interface StudentShiftsResponseShifts {
    /**
     * 授業日
     * @type {string}
     * @memberof StudentShiftsResponseShifts
     */
    'date'?: string;
    /**
     * 休校フラグ
     * @type {boolean}
     * @memberof StudentShiftsResponseShifts
     */
    'isClosed'?: boolean;
    /**
     * 授業コマ一覧
     * @type {Array<StudentShiftsResponseLessons>}
     * @memberof StudentShiftsResponseShifts
     */
    'lessons'?: Array<StudentShiftsResponseLessons>;
}
/**
 * 
 * @export
 * @interface StudentShiftsResponseSuggestedLessons
 */
export interface StudentShiftsResponseSuggestedLessons {
    /**
     * 授業科目ID
     * @type {number}
     * @memberof StudentShiftsResponseSuggestedLessons
     */
    'subjectId'?: number;
    /**
     * 授業希望回数
     * @type {number}
     * @memberof StudentShiftsResponseSuggestedLessons
     */
    'total'?: number;
}
/**
 * 授業希望募集概要
 * @export
 * @interface StudentShiftsResponseSummary
 */
export interface StudentShiftsResponseSummary {
    /**
     * 授業希望募集概要ID
     * @type {number}
     * @memberof StudentShiftsResponseSummary
     */
    'id'?: number;
    /**
     * 年
     * @type {number}
     * @memberof StudentShiftsResponseSummary
     */
    'year'?: number;
    /**
     * 月
     * @type {number}
     * @memberof StudentShiftsResponseSummary
     */
    'month'?: number;
    /**
     * 授業希望募集ステータス (0:不明, 1:募集前, 2:受付中, 3:締切後)
     * @type {number}
     * @memberof StudentShiftsResponseSummary
     */
    'shiftStatus'?: number;
    /**
     * 授業希望提出ステータス (0:不明, 1:未提出, 2:提出済)
     * @type {number}
     * @memberof StudentShiftsResponseSummary
     */
    'submissionStatus'?: number;
    /**
     * 授業希望募集開始日時
     * @type {string}
     * @memberof StudentShiftsResponseSummary
     */
    'openAt'?: string;
    /**
     * 授業希望募集締切日時
     * @type {string}
     * @memberof StudentShiftsResponseSummary
     */
    'endAt'?: string;
    /**
     * 登録日時
     * @type {string}
     * @memberof StudentShiftsResponseSummary
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof StudentShiftsResponseSummary
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface StudentsResponse
 */
export interface StudentsResponse {
    /**
     * 生徒一覧
     * @type {Array<StudentsResponseStudents>}
     * @memberof StudentsResponse
     */
    'students'?: Array<StudentsResponseStudents>;
    /**
     * 生徒合計数
     * @type {number}
     * @memberof StudentsResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface StudentsResponseStudents
 */
export interface StudentsResponseStudents {
    /**
     * 生徒ID
     * @type {string}
     * @memberof StudentsResponseStudents
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof StudentsResponseStudents
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof StudentsResponseStudents
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof StudentsResponseStudents
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof StudentsResponseStudents
     */
    'firstNameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof StudentsResponseStudents
     */
    'mail'?: string;
    /**
     * 校種(0:不明, 1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof StudentsResponseStudents
     */
    'schoolType'?: number;
    /**
     * 登録日時
     * @type {string}
     * @memberof StudentsResponseStudents
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof StudentsResponseStudents
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface SubjectResponse
 */
export interface SubjectResponse {
    /**
     * 授業科目ID
     * @type {number}
     * @memberof SubjectResponse
     */
    'id'?: number;
    /**
     * 授業科目名
     * @type {string}
     * @memberof SubjectResponse
     */
    'name'?: string;
    /**
     * 表示色
     * @type {string}
     * @memberof SubjectResponse
     */
    'color'?: string;
    /**
     * 校種 (1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof SubjectResponse
     */
    'schoolType'?: number;
    /**
     * 登録日時
     * @type {string}
     * @memberof SubjectResponse
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof SubjectResponse
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface SubjectsResponse
 */
export interface SubjectsResponse {
    /**
     * 授業科目一覧
     * @type {Array<SubjectsResponseSubjects>}
     * @memberof SubjectsResponse
     */
    'subjects'?: Array<SubjectsResponseSubjects>;
}
/**
 * 
 * @export
 * @interface SubjectsResponseSubjects
 */
export interface SubjectsResponseSubjects {
    /**
     * 授業科目ID
     * @type {number}
     * @memberof SubjectsResponseSubjects
     */
    'id'?: number;
    /**
     * 授業科目名
     * @type {string}
     * @memberof SubjectsResponseSubjects
     */
    'name'?: string;
    /**
     * 表示色
     * @type {string}
     * @memberof SubjectsResponseSubjects
     */
    'color'?: string;
    /**
     * 校種 (1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof SubjectsResponseSubjects
     */
    'schoolType'?: number;
    /**
     * 登録日時
     * @type {string}
     * @memberof SubjectsResponseSubjects
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof SubjectsResponseSubjects
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface TeacherResponse
 */
export interface TeacherResponse {
    /**
     * 講師ID
     * @type {string}
     * @memberof TeacherResponse
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof TeacherResponse
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof TeacherResponse
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof TeacherResponse
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof TeacherResponse
     */
    'firstNameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof TeacherResponse
     */
    'mail'?: string;
    /**
     * 権限 (0:不明, 1:講師, 2:管理者)
     * @type {number}
     * @memberof TeacherResponse
     */
    'role'?: number;
    /**
     * 登録日時
     * @type {string}
     * @memberof TeacherResponse
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof TeacherResponse
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {AuthResponseSubjects}
     * @memberof TeacherResponse
     */
    'subjects'?: AuthResponseSubjects;
}
/**
 * 
 * @export
 * @interface TeacherShiftsResponse
 */
export interface TeacherShiftsResponse {
    /**
     * 
     * @type {TeacherShiftsResponseSummary}
     * @memberof TeacherShiftsResponse
     */
    'summary'?: TeacherShiftsResponseSummary;
    /**
     * 日毎の募集シフト一覧
     * @type {Array<TeacherShiftsResponseShifts>}
     * @memberof TeacherShiftsResponse
     */
    'shifts'?: Array<TeacherShiftsResponseShifts>;
}
/**
 * 
 * @export
 * @interface TeacherShiftsResponseLessons
 */
export interface TeacherShiftsResponseLessons {
    /**
     * 授業コマID
     * @type {number}
     * @memberof TeacherShiftsResponseLessons
     */
    'id'?: number;
    /**
     * 出勤可能フラグ
     * @type {boolean}
     * @memberof TeacherShiftsResponseLessons
     */
    'enabled'?: boolean;
    /**
     * 授業開始時間
     * @type {string}
     * @memberof TeacherShiftsResponseLessons
     */
    'startTime'?: string;
    /**
     * 授業終了時間
     * @type {string}
     * @memberof TeacherShiftsResponseLessons
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface TeacherShiftsResponseShifts
 */
export interface TeacherShiftsResponseShifts {
    /**
     * 授業日
     * @type {string}
     * @memberof TeacherShiftsResponseShifts
     */
    'date'?: string;
    /**
     * 休校フラグ
     * @type {boolean}
     * @memberof TeacherShiftsResponseShifts
     */
    'isClosed'?: boolean;
    /**
     * 授業コマ一覧
     * @type {Array<TeacherShiftsResponseLessons>}
     * @memberof TeacherShiftsResponseShifts
     */
    'lessons'?: Array<TeacherShiftsResponseLessons>;
}
/**
 * 募集シフト概要
 * @export
 * @interface TeacherShiftsResponseSummary
 */
export interface TeacherShiftsResponseSummary {
    /**
     * シフト募集概要ID
     * @type {number}
     * @memberof TeacherShiftsResponseSummary
     */
    'id'?: number;
    /**
     * 年
     * @type {number}
     * @memberof TeacherShiftsResponseSummary
     */
    'year'?: number;
    /**
     * 月
     * @type {number}
     * @memberof TeacherShiftsResponseSummary
     */
    'month'?: number;
    /**
     * シフト募集ステータス (0:不明, 1:募集前, 2:受付中, 3:締切後)
     * @type {number}
     * @memberof TeacherShiftsResponseSummary
     */
    'shiftStatus'?: number;
    /**
     * シフト提出ステータス (0:不明, 1:未提出, 2:提出済)
     * @type {number}
     * @memberof TeacherShiftsResponseSummary
     */
    'submissionStatus'?: number;
    /**
     * シフト募集開始日時
     * @type {string}
     * @memberof TeacherShiftsResponseSummary
     */
    'openAt'?: string;
    /**
     * シフト募集締切日時
     * @type {string}
     * @memberof TeacherShiftsResponseSummary
     */
    'endAt'?: string;
    /**
     * 登録日時
     * @type {string}
     * @memberof TeacherShiftsResponseSummary
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof TeacherShiftsResponseSummary
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface TeacherSubmissionsResponse
 */
export interface TeacherSubmissionsResponse {
    /**
     * シフト募集概要一覧
     * @type {Array<TeacherSubmissionsResponseSummaries>}
     * @memberof TeacherSubmissionsResponse
     */
    'summaries'?: Array<TeacherSubmissionsResponseSummaries>;
}
/**
 * 
 * @export
 * @interface TeacherSubmissionsResponseSummaries
 */
export interface TeacherSubmissionsResponseSummaries {
    /**
     * シフト募集概要ID
     * @type {number}
     * @memberof TeacherSubmissionsResponseSummaries
     */
    'id'?: number;
    /**
     * 年
     * @type {number}
     * @memberof TeacherSubmissionsResponseSummaries
     */
    'year'?: number;
    /**
     * 月
     * @type {number}
     * @memberof TeacherSubmissionsResponseSummaries
     */
    'month'?: number;
    /**
     * シフト募集ステータス (0:不明, 1:募集前, 2:受付中, 3:締切後)
     * @type {number}
     * @memberof TeacherSubmissionsResponseSummaries
     */
    'shiftStatus'?: number;
    /**
     * シフト提出ステータス (0:不明, 1:未提出, 2:提出済)
     * @type {number}
     * @memberof TeacherSubmissionsResponseSummaries
     */
    'submissionStatus'?: number;
    /**
     * シフト募集開始日時
     * @type {string}
     * @memberof TeacherSubmissionsResponseSummaries
     */
    'openAt'?: string;
    /**
     * シフト募集締切日時
     * @type {string}
     * @memberof TeacherSubmissionsResponseSummaries
     */
    'endAt'?: string;
    /**
     * 登録日時
     * @type {string}
     * @memberof TeacherSubmissionsResponseSummaries
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof TeacherSubmissionsResponseSummaries
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface TeachersResponse
 */
export interface TeachersResponse {
    /**
     * 講師一覧
     * @type {Array<TeachersResponseTeachers>}
     * @memberof TeachersResponse
     */
    'teachers'?: Array<TeachersResponseTeachers>;
    /**
     * 講師合計数
     * @type {number}
     * @memberof TeachersResponse
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface TeachersResponseTeachers
 */
export interface TeachersResponseTeachers {
    /**
     * 講師ID
     * @type {string}
     * @memberof TeachersResponseTeachers
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof TeachersResponseTeachers
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof TeachersResponseTeachers
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof TeachersResponseTeachers
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof TeachersResponseTeachers
     */
    'firstNameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof TeachersResponseTeachers
     */
    'mail'?: string;
    /**
     * 権限 (0:不明, 1:講師, 2:管理者)
     * @type {number}
     * @memberof TeachersResponseTeachers
     */
    'role'?: number;
    /**
     * 登録日時
     * @type {string}
     * @memberof TeachersResponseTeachers
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof TeachersResponseTeachers
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {AuthResponseSubjects}
     * @memberof TeachersResponseTeachers
     */
    'subjects'?: AuthResponseSubjects;
}
/**
 * 
 * @export
 * @interface UpdateLessonRequest
 */
export interface UpdateLessonRequest {
    /**
     * 授業スケジュールID
     * @type {number}
     * @memberof UpdateLessonRequest
     */
    'shiftId'?: number;
    /**
     * 授業科目ID
     * @type {number}
     * @memberof UpdateLessonRequest
     */
    'subjectId'?: number;
    /**
     * 教室番号
     * @type {number}
     * @memberof UpdateLessonRequest
     */
    'room'?: number;
    /**
     * 講師ID
     * @type {string}
     * @memberof UpdateLessonRequest
     */
    'teacherId'?: string;
    /**
     * 生徒ID
     * @type {string}
     * @memberof UpdateLessonRequest
     */
    'studentId'?: string;
}
/**
 * 
 * @export
 * @interface UpdateMyMailRequest
 */
export interface UpdateMyMailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof UpdateMyMailRequest
     */
    'mail'?: string;
}
/**
 * 
 * @export
 * @interface UpdateMyPasswordRequest
 */
export interface UpdateMyPasswordRequest {
    /**
     * パスワード
     * @type {string}
     * @memberof UpdateMyPasswordRequest
     */
    'password'?: string;
    /**
     * パスワード
     * @type {string}
     * @memberof UpdateMyPasswordRequest
     */
    'passwordConfirmation'?: string;
}
/**
 * 
 * @export
 * @interface UpdateMySubjectsRequest
 */
export interface UpdateMySubjectsRequest {
    /**
     * 校種 (1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof UpdateMySubjectsRequest
     */
    'schoolType'?: number;
    /**
     * 担当授業科目一覧
     * @type {Array<number>}
     * @memberof UpdateMySubjectsRequest
     */
    'subjectIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface UpdateRoomsTotalRequest
 */
export interface UpdateRoomsTotalRequest {
    /**
     * 教室数
     * @type {number}
     * @memberof UpdateRoomsTotalRequest
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface UpdateSchedulesRequest
 */
export interface UpdateSchedulesRequest {
    /**
     * 曜日ごとのスケジュール一覧
     * @type {Array<SchedulesResponseSchedules>}
     * @memberof UpdateSchedulesRequest
     */
    'schedules'?: Array<SchedulesResponseSchedules>;
}
/**
 * 
 * @export
 * @interface UpdateShiftSummaryDecidedRequest
 */
export interface UpdateShiftSummaryDecidedRequest {
    /**
     * 授業スケジュール確定フラグ
     * @type {boolean}
     * @memberof UpdateShiftSummaryDecidedRequest
     */
    'decided'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateShiftSummaryScheduleRequest
 */
export interface UpdateShiftSummaryScheduleRequest {
    /**
     * シフト募集開始日
     * @type {string}
     * @memberof UpdateShiftSummaryScheduleRequest
     */
    'openDate'?: string;
    /**
     * シフト募集締切日
     * @type {string}
     * @memberof UpdateShiftSummaryScheduleRequest
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface UpdateStudentMailRequest
 */
export interface UpdateStudentMailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof UpdateStudentMailRequest
     */
    'mail'?: string;
}
/**
 * 
 * @export
 * @interface UpdateStudentPasswordRequest
 */
export interface UpdateStudentPasswordRequest {
    /**
     * パスワード
     * @type {string}
     * @memberof UpdateStudentPasswordRequest
     */
    'password'?: string;
    /**
     * パスワード
     * @type {string}
     * @memberof UpdateStudentPasswordRequest
     */
    'passwordConfirmation'?: string;
}
/**
 * 
 * @export
 * @interface UpdateStudentSubjectsRequest
 */
export interface UpdateStudentSubjectsRequest {
    /**
     * 校種 (1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof UpdateStudentSubjectsRequest
     */
    'schoolType'?: number;
    /**
     * 受講科目一覧
     * @type {Array<number>}
     * @memberof UpdateStudentSubjectsRequest
     */
    'subjectIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface UpdateSubjectRequest
 */
export interface UpdateSubjectRequest {
    /**
     * 授業科目名
     * @type {string}
     * @memberof UpdateSubjectRequest
     */
    'name'?: string;
    /**
     * 表示色
     * @type {string}
     * @memberof UpdateSubjectRequest
     */
    'color'?: string;
    /**
     * 校種 (1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof UpdateSubjectRequest
     */
    'schoolType'?: number;
}
/**
 * 
 * @export
 * @interface UpdateTeacherMailRequest
 */
export interface UpdateTeacherMailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof UpdateTeacherMailRequest
     */
    'mail'?: string;
}
/**
 * 
 * @export
 * @interface UpdateTeacherPasswordRequest
 */
export interface UpdateTeacherPasswordRequest {
    /**
     * パスワード
     * @type {string}
     * @memberof UpdateTeacherPasswordRequest
     */
    'password'?: string;
    /**
     * パスワード
     * @type {string}
     * @memberof UpdateTeacherPasswordRequest
     */
    'passwordConfirmation'?: string;
}
/**
 * 
 * @export
 * @interface UpdateTeacherRoleRequest
 */
export interface UpdateTeacherRoleRequest {
    /**
     * 権限 (1:講師, 2:管理者)
     * @type {number}
     * @memberof UpdateTeacherRoleRequest
     */
    'role'?: number;
}
/**
 * 
 * @export
 * @interface UpdateTeacherSubjectsRequest
 */
export interface UpdateTeacherSubjectsRequest {
    /**
     * 校種 (1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof UpdateTeacherSubjectsRequest
     */
    'schoolType'?: number;
    /**
     * 担当授業科目一覧
     * @type {Array<number>}
     * @memberof UpdateTeacherSubjectsRequest
     */
    'subjectIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface UpsertTeacherShiftsRequest
 */
export interface UpsertTeacherShiftsRequest {
    /**
     * 出勤可能シフトID一覧
     * @type {Array<number>}
     * @memberof UpsertTeacherShiftsRequest
     */
    'shiftIds'?: Array<number>;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {UpdateMyMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeMailPatch: async (body: UpdateMyMailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1MeMailPatch', 'body', body)
            const localVarPath = `/v1/me/mail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {UpdateMyPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MePasswordPatch: async (body: UpdateMyPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1MePasswordPatch', 'body', body)
            const localVarPath = `/v1/me/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 担当教科の更新
         * @param {UpdateMySubjectsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeSubjectsPatch: async (body: UpdateMySubjectsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1MeSubjectsPatch', 'body', body)
            const localVarPath = `/v1/me/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {UpdateMyMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MeMailPatch(body: UpdateMyMailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MeMailPatch(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {UpdateMyPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MePasswordPatch(body: UpdateMyPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MePasswordPatch(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 担当教科の更新
         * @param {UpdateMySubjectsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MeSubjectsPatch(body: UpdateMySubjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MeSubjectsPatch(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary ユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeGet(options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.v1MeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {UpdateMyMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeMailPatch(body: UpdateMyMailRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1MeMailPatch(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {UpdateMyPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MePasswordPatch(body: UpdateMyPasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1MePasswordPatch(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 担当教科の更新
         * @param {UpdateMySubjectsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeSubjectsPatch(body: UpdateMySubjectsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1MeSubjectsPatch(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary ユーザー情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1MeGet(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1MeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メールアドレスの更新
     * @param {UpdateMyMailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1MeMailPatch(body: UpdateMyMailRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1MeMailPatch(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary パスワードの更新
     * @param {UpdateMyPasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1MePasswordPatch(body: UpdateMyPasswordRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1MePasswordPatch(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 担当教科の更新
     * @param {UpdateMySubjectsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1MeSubjectsPatch(body: UpdateMySubjectsRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1MeSubjectsPatch(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LessonApi - axios parameter creator
 * @export
 */
export const LessonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 授業一覧取得
         * @param {string} [since] 取得開始日 (YYYYMMDD)
         * @param {string} [until] 取得開始日 (YYYYMMDD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LessonsGet: async (since?: string, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/lessons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LessonApi - functional programming interface
 * @export
 */
export const LessonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LessonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 授業一覧取得
         * @param {string} [since] 取得開始日 (YYYYMMDD)
         * @param {string} [until] 取得開始日 (YYYYMMDD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LessonsGet(since?: string, until?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LessonsGet(since, until, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LessonApi - factory interface
 * @export
 */
export const LessonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LessonApiFp(configuration)
    return {
        /**
         * 
         * @summary 授業一覧取得
         * @param {string} [since] 取得開始日 (YYYYMMDD)
         * @param {string} [until] 取得開始日 (YYYYMMDD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LessonsGet(since?: string, until?: string, options?: any): AxiosPromise<LessonsResponse> {
            return localVarFp.v1LessonsGet(since, until, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LessonApi - object-oriented interface
 * @export
 * @class LessonApi
 * @extends {BaseAPI}
 */
export class LessonApi extends BaseAPI {
    /**
     * 
     * @summary 授業一覧取得
     * @param {string} [since] 取得開始日 (YYYYMMDD)
     * @param {string} [until] 取得開始日 (YYYYMMDD)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public v1LessonsGet(since?: string, until?: string, options?: AxiosRequestConfig) {
        return LessonApiFp(this.configuration).v1LessonsGet(since, until, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OtherApi - axios parameter creator
 * @export
 */
export const OtherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 教室数取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RoomsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 教室数更新
         * @param {UpdateRoomsTotalRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RoomsPatch: async (body: UpdateRoomsTotalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1RoomsPatch', 'body', body)
            const localVarPath = `/v1/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業スケジュール一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業スケジュール更新
         * @param {UpdateSchedulesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesPatch: async (body: UpdateSchedulesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1SchedulesPatch', 'body', body)
            const localVarPath = `/v1/schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OtherApi - functional programming interface
 * @export
 */
export const OtherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OtherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 教室数取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RoomsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomsTotalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RoomsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 教室数更新
         * @param {UpdateRoomsTotalRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1RoomsPatch(body: UpdateRoomsTotalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1RoomsPatch(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業スケジュール一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業スケジュール更新
         * @param {UpdateSchedulesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SchedulesPatch(body: UpdateSchedulesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SchedulesPatch(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OtherApi - factory interface
 * @export
 */
export const OtherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OtherApiFp(configuration)
    return {
        /**
         * 
         * @summary 教室数取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RoomsGet(options?: any): AxiosPromise<RoomsTotalResponse> {
            return localVarFp.v1RoomsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 教室数更新
         * @param {UpdateRoomsTotalRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1RoomsPatch(body: UpdateRoomsTotalRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1RoomsPatch(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業スケジュール一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesGet(options?: any): AxiosPromise<SchedulesResponse> {
            return localVarFp.v1SchedulesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業スケジュール更新
         * @param {UpdateSchedulesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SchedulesPatch(body: UpdateSchedulesRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1SchedulesPatch(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OtherApi - object-oriented interface
 * @export
 * @class OtherApi
 * @extends {BaseAPI}
 */
export class OtherApi extends BaseAPI {
    /**
     * 
     * @summary 教室数取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public v1RoomsGet(options?: AxiosRequestConfig) {
        return OtherApiFp(this.configuration).v1RoomsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 教室数更新
     * @param {UpdateRoomsTotalRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public v1RoomsPatch(body: UpdateRoomsTotalRequest, options?: AxiosRequestConfig) {
        return OtherApiFp(this.configuration).v1RoomsPatch(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業スケジュール一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public v1SchedulesGet(options?: AxiosRequestConfig) {
        return OtherApiFp(this.configuration).v1SchedulesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業スケジュール更新
     * @param {UpdateSchedulesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherApi
     */
    public v1SchedulesPatch(body: UpdateSchedulesRequest, options?: AxiosRequestConfig) {
        return OtherApiFp(this.configuration).v1SchedulesPatch(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShiftApi - axios parameter creator
 * @export
 */
export const ShiftApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary シフト募集概要一覧
         * @param {number} [status] 募集ステータス (未指定:全ステータス, 1:募集前, 2:募集中, 3:募集締切後)
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsGet: async (status?: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/shifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary シフト募集作成
         * @param {CreateShiftsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsPost: async (body: CreateShiftsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1ShiftsPost', 'body', body)
            const localVarPath = `/v1/shifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業スケジュール確定フラグの更新
         * @param {number} shiftId シフト募集ID
         * @param {UpdateShiftSummaryDecidedRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdDecidedPatch: async (shiftId: number, body: UpdateShiftSummaryDecidedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdDecidedPatch', 'shiftId', shiftId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1ShiftsShiftIdDecidedPatch', 'body', body)
            const localVarPath = `/v1/shifts/{shiftId}/decided`
                .replace(`{${"shiftId"}}`, encodeURIComponent(String(shiftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary シフト募集削除
         * @param {number} shiftId シフト募集ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdDelete: async (shiftId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdDelete', 'shiftId', shiftId)
            const localVarPath = `/v1/shifts/{shiftId}`
                .replace(`{${"shiftId"}}`, encodeURIComponent(String(shiftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary シフト募集詳細一覧
         * @param {number} shiftId シフト募集ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdGet: async (shiftId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdGet', 'shiftId', shiftId)
            const localVarPath = `/v1/shifts/{shiftId}`
                .replace(`{${"shiftId"}}`, encodeURIComponent(String(shiftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業一覧
         * @param {number} shiftId シフト募集ID
         * @param {string} [teacherId] 講師ID
         * @param {string} [studentId] 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdLessonsGet: async (shiftId: number, teacherId?: string, studentId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdLessonsGet', 'shiftId', shiftId)
            const localVarPath = `/v1/shifts/{shiftId}/lessons`
                .replace(`{${"shiftId"}}`, encodeURIComponent(String(shiftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (teacherId !== undefined) {
                localVarQueryParameter['teacherId'] = teacherId;
            }

            if (studentId !== undefined) {
                localVarQueryParameter['studentId'] = studentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業削除
         * @param {number} shiftId シフト募集ID
         * @param {number} lessonId 授業ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdLessonsLessonIdDelete: async (shiftId: number, lessonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdLessonsLessonIdDelete', 'shiftId', shiftId)
            // verify required parameter 'lessonId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdLessonsLessonIdDelete', 'lessonId', lessonId)
            const localVarPath = `/v1/shifts/{shiftId}/lessons/{lessonId}`
                .replace(`{${"shiftId"}}`, encodeURIComponent(String(shiftId)))
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業更新
         * @param {number} shiftId シフト募集ID
         * @param {number} lessonId 授業ID
         * @param {UpdateLessonRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdLessonsLessonIdPatch: async (shiftId: number, lessonId: number, body: UpdateLessonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdLessonsLessonIdPatch', 'shiftId', shiftId)
            // verify required parameter 'lessonId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdLessonsLessonIdPatch', 'lessonId', lessonId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1ShiftsShiftIdLessonsLessonIdPatch', 'body', body)
            const localVarPath = `/v1/shifts/{shiftId}/lessons/{lessonId}`
                .replace(`{${"shiftId"}}`, encodeURIComponent(String(shiftId)))
                .replace(`{${"lessonId"}}`, encodeURIComponent(String(lessonId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業登録
         * @param {number} shiftId シフト募集ID
         * @param {CreateLessonRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdLessonsPost: async (shiftId: number, body: CreateLessonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdLessonsPost', 'shiftId', shiftId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1ShiftsShiftIdLessonsPost', 'body', body)
            const localVarPath = `/v1/shifts/{shiftId}/lessons`
                .replace(`{${"shiftId"}}`, encodeURIComponent(String(shiftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary シフト募集期間の更新
         * @param {number} shiftId シフト募集ID
         * @param {UpdateShiftSummaryScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdSchedulePatch: async (shiftId: number, body: UpdateShiftSummaryScheduleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdSchedulePatch', 'shiftId', shiftId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1ShiftsShiftIdSchedulePatch', 'body', body)
            const localVarPath = `/v1/shifts/{shiftId}/schedule`
                .replace(`{${"shiftId"}}`, encodeURIComponent(String(shiftId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業希望一覧
         * @param {number} shiftId 授業希望募集ID
         * @param {string} studentId 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdStudentsStudentIdGet: async (shiftId: number, studentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdStudentsStudentIdGet', 'shiftId', shiftId)
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdStudentsStudentIdGet', 'studentId', studentId)
            const localVarPath = `/v1/shifts/{shiftId}/students/{studentId}`
                .replace(`{${"shiftId"}}`, encodeURIComponent(String(shiftId)))
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 時間毎のシフト提出状況一覧
         * @param {number} shiftId シフトサマリID
         * @param {number} submissionId シフト詳細ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdSubmissionsSubmissionIdGet: async (shiftId: number, submissionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdSubmissionsSubmissionIdGet', 'shiftId', shiftId)
            // verify required parameter 'submissionId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdSubmissionsSubmissionIdGet', 'submissionId', submissionId)
            const localVarPath = `/v1/shifts/{shiftId}/submissions/{submissionId}`
                .replace(`{${"shiftId"}}`, encodeURIComponent(String(shiftId)))
                .replace(`{${"submissionId"}}`, encodeURIComponent(String(submissionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 出勤可能シフト一覧
         * @param {number} shiftId シフト募集ID
         * @param {string} teacherId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdTeachersTeacherIdGet: async (shiftId: number, teacherId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shiftId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdTeachersTeacherIdGet', 'shiftId', shiftId)
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('v1ShiftsShiftIdTeachersTeacherIdGet', 'teacherId', teacherId)
            const localVarPath = `/v1/shifts/{shiftId}/teachers/{teacherId}`
                .replace(`{${"shiftId"}}`, encodeURIComponent(String(shiftId)))
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShiftApi - functional programming interface
 * @export
 */
export const ShiftApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShiftApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary シフト募集概要一覧
         * @param {number} [status] 募集ステータス (未指定:全ステータス, 1:募集前, 2:募集中, 3:募集締切後)
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsGet(status?: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftSummariesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsGet(status, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary シフト募集作成
         * @param {CreateShiftsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsPost(body: CreateShiftsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業スケジュール確定フラグの更新
         * @param {number} shiftId シフト募集ID
         * @param {UpdateShiftSummaryDecidedRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsShiftIdDecidedPatch(shiftId: number, body: UpdateShiftSummaryDecidedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsShiftIdDecidedPatch(shiftId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary シフト募集削除
         * @param {number} shiftId シフト募集ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsShiftIdDelete(shiftId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsShiftIdDelete(shiftId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary シフト募集詳細一覧
         * @param {number} shiftId シフト募集ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsShiftIdGet(shiftId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsShiftIdGet(shiftId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業一覧
         * @param {number} shiftId シフト募集ID
         * @param {string} [teacherId] 講師ID
         * @param {string} [studentId] 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsShiftIdLessonsGet(shiftId: number, teacherId?: string, studentId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftLessonsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsShiftIdLessonsGet(shiftId, teacherId, studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業削除
         * @param {number} shiftId シフト募集ID
         * @param {number} lessonId 授業ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsShiftIdLessonsLessonIdDelete(shiftId: number, lessonId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsShiftIdLessonsLessonIdDelete(shiftId, lessonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業更新
         * @param {number} shiftId シフト募集ID
         * @param {number} lessonId 授業ID
         * @param {UpdateLessonRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsShiftIdLessonsLessonIdPatch(shiftId: number, lessonId: number, body: UpdateLessonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsShiftIdLessonsLessonIdPatch(shiftId, lessonId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業登録
         * @param {number} shiftId シフト募集ID
         * @param {CreateLessonRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsShiftIdLessonsPost(shiftId: number, body: CreateLessonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsShiftIdLessonsPost(shiftId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary シフト募集期間の更新
         * @param {number} shiftId シフト募集ID
         * @param {UpdateShiftSummaryScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsShiftIdSchedulePatch(shiftId: number, body: UpdateShiftSummaryScheduleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsShiftIdSchedulePatch(shiftId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業希望一覧
         * @param {number} shiftId 授業希望募集ID
         * @param {string} studentId 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsShiftIdStudentsStudentIdGet(shiftId: number, studentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentShiftsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsShiftIdStudentsStudentIdGet(shiftId, studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 時間毎のシフト提出状況一覧
         * @param {number} shiftId シフトサマリID
         * @param {number} submissionId シフト詳細ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsShiftIdSubmissionsSubmissionIdGet(shiftId: number, submissionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShiftSubmissionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsShiftIdSubmissionsSubmissionIdGet(shiftId, submissionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 出勤可能シフト一覧
         * @param {number} shiftId シフト募集ID
         * @param {string} teacherId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ShiftsShiftIdTeachersTeacherIdGet(shiftId: number, teacherId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherShiftsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ShiftsShiftIdTeachersTeacherIdGet(shiftId, teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShiftApi - factory interface
 * @export
 */
export const ShiftApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShiftApiFp(configuration)
    return {
        /**
         * 
         * @summary シフト募集概要一覧
         * @param {number} [status] 募集ステータス (未指定:全ステータス, 1:募集前, 2:募集中, 3:募集締切後)
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsGet(status?: number, limit?: number, offset?: number, options?: any): AxiosPromise<ShiftSummariesResponse> {
            return localVarFp.v1ShiftsGet(status, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary シフト募集作成
         * @param {CreateShiftsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsPost(body: CreateShiftsRequest, options?: any): AxiosPromise<ShiftsResponse> {
            return localVarFp.v1ShiftsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業スケジュール確定フラグの更新
         * @param {number} shiftId シフト募集ID
         * @param {UpdateShiftSummaryDecidedRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdDecidedPatch(shiftId: number, body: UpdateShiftSummaryDecidedRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1ShiftsShiftIdDecidedPatch(shiftId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary シフト募集削除
         * @param {number} shiftId シフト募集ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdDelete(shiftId: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1ShiftsShiftIdDelete(shiftId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary シフト募集詳細一覧
         * @param {number} shiftId シフト募集ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdGet(shiftId: number, options?: any): AxiosPromise<ShiftsResponse> {
            return localVarFp.v1ShiftsShiftIdGet(shiftId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業一覧
         * @param {number} shiftId シフト募集ID
         * @param {string} [teacherId] 講師ID
         * @param {string} [studentId] 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdLessonsGet(shiftId: number, teacherId?: string, studentId?: string, options?: any): AxiosPromise<ShiftLessonsResponse> {
            return localVarFp.v1ShiftsShiftIdLessonsGet(shiftId, teacherId, studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業削除
         * @param {number} shiftId シフト募集ID
         * @param {number} lessonId 授業ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdLessonsLessonIdDelete(shiftId: number, lessonId: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1ShiftsShiftIdLessonsLessonIdDelete(shiftId, lessonId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業更新
         * @param {number} shiftId シフト募集ID
         * @param {number} lessonId 授業ID
         * @param {UpdateLessonRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdLessonsLessonIdPatch(shiftId: number, lessonId: number, body: UpdateLessonRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1ShiftsShiftIdLessonsLessonIdPatch(shiftId, lessonId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業登録
         * @param {number} shiftId シフト募集ID
         * @param {CreateLessonRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdLessonsPost(shiftId: number, body: CreateLessonRequest, options?: any): AxiosPromise<LessonResponse> {
            return localVarFp.v1ShiftsShiftIdLessonsPost(shiftId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary シフト募集期間の更新
         * @param {number} shiftId シフト募集ID
         * @param {UpdateShiftSummaryScheduleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdSchedulePatch(shiftId: number, body: UpdateShiftSummaryScheduleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1ShiftsShiftIdSchedulePatch(shiftId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業希望一覧
         * @param {number} shiftId 授業希望募集ID
         * @param {string} studentId 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdStudentsStudentIdGet(shiftId: number, studentId: string, options?: any): AxiosPromise<StudentShiftsResponse> {
            return localVarFp.v1ShiftsShiftIdStudentsStudentIdGet(shiftId, studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 時間毎のシフト提出状況一覧
         * @param {number} shiftId シフトサマリID
         * @param {number} submissionId シフト詳細ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdSubmissionsSubmissionIdGet(shiftId: number, submissionId: number, options?: any): AxiosPromise<ShiftSubmissionsResponse> {
            return localVarFp.v1ShiftsShiftIdSubmissionsSubmissionIdGet(shiftId, submissionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 出勤可能シフト一覧
         * @param {number} shiftId シフト募集ID
         * @param {string} teacherId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ShiftsShiftIdTeachersTeacherIdGet(shiftId: number, teacherId: string, options?: any): AxiosPromise<TeacherShiftsResponse> {
            return localVarFp.v1ShiftsShiftIdTeachersTeacherIdGet(shiftId, teacherId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShiftApi - object-oriented interface
 * @export
 * @class ShiftApi
 * @extends {BaseAPI}
 */
export class ShiftApi extends BaseAPI {
    /**
     * 
     * @summary シフト募集概要一覧
     * @param {number} [status] 募集ステータス (未指定:全ステータス, 1:募集前, 2:募集中, 3:募集締切後)
     * @param {number} [limit] 取得上限 (デフォルト:30)
     * @param {number} [offset] 取得開始位置 (デフォルト:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsGet(status?: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsGet(status, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary シフト募集作成
     * @param {CreateShiftsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsPost(body: CreateShiftsRequest, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業スケジュール確定フラグの更新
     * @param {number} shiftId シフト募集ID
     * @param {UpdateShiftSummaryDecidedRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsShiftIdDecidedPatch(shiftId: number, body: UpdateShiftSummaryDecidedRequest, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsShiftIdDecidedPatch(shiftId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary シフト募集削除
     * @param {number} shiftId シフト募集ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsShiftIdDelete(shiftId: number, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsShiftIdDelete(shiftId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary シフト募集詳細一覧
     * @param {number} shiftId シフト募集ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsShiftIdGet(shiftId: number, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsShiftIdGet(shiftId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業一覧
     * @param {number} shiftId シフト募集ID
     * @param {string} [teacherId] 講師ID
     * @param {string} [studentId] 生徒ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsShiftIdLessonsGet(shiftId: number, teacherId?: string, studentId?: string, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsShiftIdLessonsGet(shiftId, teacherId, studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業削除
     * @param {number} shiftId シフト募集ID
     * @param {number} lessonId 授業ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsShiftIdLessonsLessonIdDelete(shiftId: number, lessonId: number, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsShiftIdLessonsLessonIdDelete(shiftId, lessonId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業更新
     * @param {number} shiftId シフト募集ID
     * @param {number} lessonId 授業ID
     * @param {UpdateLessonRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsShiftIdLessonsLessonIdPatch(shiftId: number, lessonId: number, body: UpdateLessonRequest, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsShiftIdLessonsLessonIdPatch(shiftId, lessonId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業登録
     * @param {number} shiftId シフト募集ID
     * @param {CreateLessonRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsShiftIdLessonsPost(shiftId: number, body: CreateLessonRequest, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsShiftIdLessonsPost(shiftId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary シフト募集期間の更新
     * @param {number} shiftId シフト募集ID
     * @param {UpdateShiftSummaryScheduleRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsShiftIdSchedulePatch(shiftId: number, body: UpdateShiftSummaryScheduleRequest, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsShiftIdSchedulePatch(shiftId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業希望一覧
     * @param {number} shiftId 授業希望募集ID
     * @param {string} studentId 生徒ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsShiftIdStudentsStudentIdGet(shiftId: number, studentId: string, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsShiftIdStudentsStudentIdGet(shiftId, studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 時間毎のシフト提出状況一覧
     * @param {number} shiftId シフトサマリID
     * @param {number} submissionId シフト詳細ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsShiftIdSubmissionsSubmissionIdGet(shiftId: number, submissionId: number, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsShiftIdSubmissionsSubmissionIdGet(shiftId, submissionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 出勤可能シフト一覧
     * @param {number} shiftId シフト募集ID
     * @param {string} teacherId 講師ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShiftApi
     */
    public v1ShiftsShiftIdTeachersTeacherIdGet(shiftId: number, teacherId: string, options?: AxiosRequestConfig) {
        return ShiftApiFp(this.configuration).v1ShiftsShiftIdTeachersTeacherIdGet(shiftId, teacherId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudentApi - axios parameter creator
 * @export
 */
export const StudentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 生徒一覧取得
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsGet: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/students`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生徒登録
         * @param {CreateStudentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsPost: async (body: CreateStudentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1StudentsPost', 'body', body)
            const localVarPath = `/v1/students`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生徒削除
         * @param {string} studentId 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsStudentIdDelete: async (studentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('v1StudentsStudentIdDelete', 'studentId', studentId)
            const localVarPath = `/v1/students/{studentId}`
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 生徒詳細取得
         * @param {string} studentId 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsStudentIdGet: async (studentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('v1StudentsStudentIdGet', 'studentId', studentId)
            const localVarPath = `/v1/students/{studentId}`
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {string} studentId 生徒ID
         * @param {UpdateStudentMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsStudentIdMailPatch: async (studentId: string, body: UpdateStudentMailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('v1StudentsStudentIdMailPatch', 'studentId', studentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1StudentsStudentIdMailPatch', 'body', body)
            const localVarPath = `/v1/students/{studentId}/mail`
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {string} studentId 生徒ID
         * @param {UpdateStudentPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsStudentIdPasswordPatch: async (studentId: string, body: UpdateStudentPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('v1StudentsStudentIdPasswordPatch', 'studentId', studentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1StudentsStudentIdPasswordPatch', 'body', body)
            const localVarPath = `/v1/students/{studentId}/password`
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 受講科目の更新
         * @param {string} studentId 生徒ID
         * @param {UpdateStudentSubjectsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsStudentIdSubjectsPatch: async (studentId: string, body: UpdateStudentSubjectsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('v1StudentsStudentIdSubjectsPatch', 'studentId', studentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1StudentsStudentIdSubjectsPatch', 'body', body)
            const localVarPath = `/v1/students/{studentId}/subjects`
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentApi - functional programming interface
 * @export
 */
export const StudentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 生徒一覧取得
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1StudentsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1StudentsGet(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生徒登録
         * @param {CreateStudentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1StudentsPost(body: CreateStudentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1StudentsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生徒削除
         * @param {string} studentId 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1StudentsStudentIdDelete(studentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1StudentsStudentIdDelete(studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 生徒詳細取得
         * @param {string} studentId 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1StudentsStudentIdGet(studentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1StudentsStudentIdGet(studentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {string} studentId 生徒ID
         * @param {UpdateStudentMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1StudentsStudentIdMailPatch(studentId: string, body: UpdateStudentMailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1StudentsStudentIdMailPatch(studentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {string} studentId 生徒ID
         * @param {UpdateStudentPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1StudentsStudentIdPasswordPatch(studentId: string, body: UpdateStudentPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1StudentsStudentIdPasswordPatch(studentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 受講科目の更新
         * @param {string} studentId 生徒ID
         * @param {UpdateStudentSubjectsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1StudentsStudentIdSubjectsPatch(studentId: string, body: UpdateStudentSubjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1StudentsStudentIdSubjectsPatch(studentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentApi - factory interface
 * @export
 */
export const StudentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentApiFp(configuration)
    return {
        /**
         * 
         * @summary 生徒一覧取得
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsGet(limit?: number, offset?: number, options?: any): AxiosPromise<StudentsResponse> {
            return localVarFp.v1StudentsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生徒登録
         * @param {CreateStudentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsPost(body: CreateStudentRequest, options?: any): AxiosPromise<StudentResponse> {
            return localVarFp.v1StudentsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生徒削除
         * @param {string} studentId 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsStudentIdDelete(studentId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1StudentsStudentIdDelete(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 生徒詳細取得
         * @param {string} studentId 生徒ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsStudentIdGet(studentId: string, options?: any): AxiosPromise<StudentResponse> {
            return localVarFp.v1StudentsStudentIdGet(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {string} studentId 生徒ID
         * @param {UpdateStudentMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsStudentIdMailPatch(studentId: string, body: UpdateStudentMailRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1StudentsStudentIdMailPatch(studentId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {string} studentId 生徒ID
         * @param {UpdateStudentPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsStudentIdPasswordPatch(studentId: string, body: UpdateStudentPasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1StudentsStudentIdPasswordPatch(studentId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 受講科目の更新
         * @param {string} studentId 生徒ID
         * @param {UpdateStudentSubjectsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StudentsStudentIdSubjectsPatch(studentId: string, body: UpdateStudentSubjectsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1StudentsStudentIdSubjectsPatch(studentId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentApi - object-oriented interface
 * @export
 * @class StudentApi
 * @extends {BaseAPI}
 */
export class StudentApi extends BaseAPI {
    /**
     * 
     * @summary 生徒一覧取得
     * @param {number} [limit] 取得上限 (デフォルト:30)
     * @param {number} [offset] 取得開始位置 (デフォルト:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public v1StudentsGet(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).v1StudentsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生徒登録
     * @param {CreateStudentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public v1StudentsPost(body: CreateStudentRequest, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).v1StudentsPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生徒削除
     * @param {string} studentId 生徒ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public v1StudentsStudentIdDelete(studentId: string, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).v1StudentsStudentIdDelete(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 生徒詳細取得
     * @param {string} studentId 生徒ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public v1StudentsStudentIdGet(studentId: string, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).v1StudentsStudentIdGet(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メールアドレスの更新
     * @param {string} studentId 生徒ID
     * @param {UpdateStudentMailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public v1StudentsStudentIdMailPatch(studentId: string, body: UpdateStudentMailRequest, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).v1StudentsStudentIdMailPatch(studentId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary パスワードの更新
     * @param {string} studentId 生徒ID
     * @param {UpdateStudentPasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public v1StudentsStudentIdPasswordPatch(studentId: string, body: UpdateStudentPasswordRequest, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).v1StudentsStudentIdPasswordPatch(studentId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 受講科目の更新
     * @param {string} studentId 生徒ID
     * @param {UpdateStudentSubjectsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public v1StudentsStudentIdSubjectsPatch(studentId: string, body: UpdateStudentSubjectsRequest, options?: AxiosRequestConfig) {
        return StudentApiFp(this.configuration).v1StudentsStudentIdSubjectsPatch(studentId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubjectApi - axios parameter creator
 * @export
 */
export const SubjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 授業科目一覧取得
         * @param {number} [type] 校種 (未指定:全校種, 1:小学校, 2:中学校, 3:高等学校)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubjectsGet: async (type?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業科目登録
         * @param {CreateSubjectRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubjectsPost: async (body?: CreateSubjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業科目削除
         * @param {number} subjectId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubjectsSubjectIdDelete: async (subjectId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectId' is not null or undefined
            assertParamExists('v1SubjectsSubjectIdDelete', 'subjectId', subjectId)
            const localVarPath = `/v1/subjects/{subjectId}`
                .replace(`{${"subjectId"}}`, encodeURIComponent(String(subjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業科目更新
         * @param {number} subjectId 講師ID
         * @param {UpdateSubjectRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubjectsSubjectIdPatch: async (subjectId: number, body?: UpdateSubjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectId' is not null or undefined
            assertParamExists('v1SubjectsSubjectIdPatch', 'subjectId', subjectId)
            const localVarPath = `/v1/subjects/{subjectId}`
                .replace(`{${"subjectId"}}`, encodeURIComponent(String(subjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubjectApi - functional programming interface
 * @export
 */
export const SubjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 授業科目一覧取得
         * @param {number} [type] 校種 (未指定:全校種, 1:小学校, 2:中学校, 3:高等学校)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SubjectsGet(type?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SubjectsGet(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業科目登録
         * @param {CreateSubjectRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SubjectsPost(body?: CreateSubjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SubjectsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業科目削除
         * @param {number} subjectId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SubjectsSubjectIdDelete(subjectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SubjectsSubjectIdDelete(subjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業科目更新
         * @param {number} subjectId 講師ID
         * @param {UpdateSubjectRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SubjectsSubjectIdPatch(subjectId: number, body?: UpdateSubjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SubjectsSubjectIdPatch(subjectId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubjectApi - factory interface
 * @export
 */
export const SubjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubjectApiFp(configuration)
    return {
        /**
         * 
         * @summary 授業科目一覧取得
         * @param {number} [type] 校種 (未指定:全校種, 1:小学校, 2:中学校, 3:高等学校)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubjectsGet(type?: number, options?: any): AxiosPromise<SubjectsResponse> {
            return localVarFp.v1SubjectsGet(type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業科目登録
         * @param {CreateSubjectRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubjectsPost(body?: CreateSubjectRequest, options?: any): AxiosPromise<SubjectResponse> {
            return localVarFp.v1SubjectsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業科目削除
         * @param {number} subjectId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubjectsSubjectIdDelete(subjectId: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1SubjectsSubjectIdDelete(subjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業科目更新
         * @param {number} subjectId 講師ID
         * @param {UpdateSubjectRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubjectsSubjectIdPatch(subjectId: number, body?: UpdateSubjectRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1SubjectsSubjectIdPatch(subjectId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubjectApi - object-oriented interface
 * @export
 * @class SubjectApi
 * @extends {BaseAPI}
 */
export class SubjectApi extends BaseAPI {
    /**
     * 
     * @summary 授業科目一覧取得
     * @param {number} [type] 校種 (未指定:全校種, 1:小学校, 2:中学校, 3:高等学校)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public v1SubjectsGet(type?: number, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).v1SubjectsGet(type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業科目登録
     * @param {CreateSubjectRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public v1SubjectsPost(body?: CreateSubjectRequest, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).v1SubjectsPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業科目削除
     * @param {number} subjectId 講師ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public v1SubjectsSubjectIdDelete(subjectId: number, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).v1SubjectsSubjectIdDelete(subjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業科目更新
     * @param {number} subjectId 講師ID
     * @param {UpdateSubjectRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public v1SubjectsSubjectIdPatch(subjectId: number, body?: UpdateSubjectRequest, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).v1SubjectsSubjectIdPatch(subjectId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubmissionApi - axios parameter creator
 * @export
 */
export const SubmissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary シフト提出状況一覧取得
         * @param {string} teacherId 講師ID
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdSubmissionsGet: async (teacherId: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('v1TeachersTeacherIdSubmissionsGet', 'teacherId', teacherId)
            const localVarPath = `/v1/teachers/{teacherId}/submissions`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary シフト希望提出状況取得
         * @param {string} teacherId 講師ID
         * @param {number} summaryId シフト募集サマリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdSubmissionsSummaryIdGet: async (teacherId: string, summaryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('v1TeachersTeacherIdSubmissionsSummaryIdGet', 'teacherId', teacherId)
            // verify required parameter 'summaryId' is not null or undefined
            assertParamExists('v1TeachersTeacherIdSubmissionsSummaryIdGet', 'summaryId', summaryId)
            const localVarPath = `/v1/teachers/{teacherId}/submissions/{summaryId}`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)))
                .replace(`{${"summaryId"}}`, encodeURIComponent(String(summaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary シフト希望提出
         * @param {string} teacherId 講師ID
         * @param {number} summaryId シフト募集サマリID
         * @param {UpsertTeacherShiftsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdSubmissionsSummaryIdPost: async (teacherId: string, summaryId: number, body: UpsertTeacherShiftsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('v1TeachersTeacherIdSubmissionsSummaryIdPost', 'teacherId', teacherId)
            // verify required parameter 'summaryId' is not null or undefined
            assertParamExists('v1TeachersTeacherIdSubmissionsSummaryIdPost', 'summaryId', summaryId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1TeachersTeacherIdSubmissionsSummaryIdPost', 'body', body)
            const localVarPath = `/v1/teachers/{teacherId}/submissions/{summaryId}`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)))
                .replace(`{${"summaryId"}}`, encodeURIComponent(String(summaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubmissionApi - functional programming interface
 * @export
 */
export const SubmissionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubmissionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary シフト提出状況一覧取得
         * @param {string} teacherId 講師ID
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TeachersTeacherIdSubmissionsGet(teacherId: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherSubmissionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TeachersTeacherIdSubmissionsGet(teacherId, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary シフト希望提出状況取得
         * @param {string} teacherId 講師ID
         * @param {number} summaryId シフト募集サマリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TeachersTeacherIdSubmissionsSummaryIdGet(teacherId: string, summaryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherShiftsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TeachersTeacherIdSubmissionsSummaryIdGet(teacherId, summaryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary シフト希望提出
         * @param {string} teacherId 講師ID
         * @param {number} summaryId シフト募集サマリID
         * @param {UpsertTeacherShiftsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TeachersTeacherIdSubmissionsSummaryIdPost(teacherId: string, summaryId: number, body: UpsertTeacherShiftsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherShiftsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TeachersTeacherIdSubmissionsSummaryIdPost(teacherId, summaryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubmissionApi - factory interface
 * @export
 */
export const SubmissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubmissionApiFp(configuration)
    return {
        /**
         * 
         * @summary シフト提出状況一覧取得
         * @param {string} teacherId 講師ID
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdSubmissionsGet(teacherId: string, limit?: number, offset?: number, options?: any): AxiosPromise<TeacherSubmissionsResponse> {
            return localVarFp.v1TeachersTeacherIdSubmissionsGet(teacherId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary シフト希望提出状況取得
         * @param {string} teacherId 講師ID
         * @param {number} summaryId シフト募集サマリID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdSubmissionsSummaryIdGet(teacherId: string, summaryId: number, options?: any): AxiosPromise<TeacherShiftsResponse> {
            return localVarFp.v1TeachersTeacherIdSubmissionsSummaryIdGet(teacherId, summaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary シフト希望提出
         * @param {string} teacherId 講師ID
         * @param {number} summaryId シフト募集サマリID
         * @param {UpsertTeacherShiftsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdSubmissionsSummaryIdPost(teacherId: string, summaryId: number, body: UpsertTeacherShiftsRequest, options?: any): AxiosPromise<TeacherShiftsResponse> {
            return localVarFp.v1TeachersTeacherIdSubmissionsSummaryIdPost(teacherId, summaryId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubmissionApi - object-oriented interface
 * @export
 * @class SubmissionApi
 * @extends {BaseAPI}
 */
export class SubmissionApi extends BaseAPI {
    /**
     * 
     * @summary シフト提出状況一覧取得
     * @param {string} teacherId 講師ID
     * @param {number} [limit] 取得上限 (デフォルト:30)
     * @param {number} [offset] 取得開始位置 (デフォルト:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApi
     */
    public v1TeachersTeacherIdSubmissionsGet(teacherId: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return SubmissionApiFp(this.configuration).v1TeachersTeacherIdSubmissionsGet(teacherId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary シフト希望提出状況取得
     * @param {string} teacherId 講師ID
     * @param {number} summaryId シフト募集サマリID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApi
     */
    public v1TeachersTeacherIdSubmissionsSummaryIdGet(teacherId: string, summaryId: number, options?: AxiosRequestConfig) {
        return SubmissionApiFp(this.configuration).v1TeachersTeacherIdSubmissionsSummaryIdGet(teacherId, summaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary シフト希望提出
     * @param {string} teacherId 講師ID
     * @param {number} summaryId シフト募集サマリID
     * @param {UpsertTeacherShiftsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApi
     */
    public v1TeachersTeacherIdSubmissionsSummaryIdPost(teacherId: string, summaryId: number, body: UpsertTeacherShiftsRequest, options?: AxiosRequestConfig) {
        return SubmissionApiFp(this.configuration).v1TeachersTeacherIdSubmissionsSummaryIdPost(teacherId, summaryId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeacherApi - axios parameter creator
 * @export
 */
export const TeacherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 講師一覧取得
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersGet: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/teachers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 講師登録
         * @param {CreateTeacherRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersPost: async (body: CreateTeacherRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1TeachersPost', 'body', body)
            const localVarPath = `/v1/teachers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 講師削除
         * @param {string} teacherId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdDelete: async (teacherId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('v1TeachersTeacherIdDelete', 'teacherId', teacherId)
            const localVarPath = `/v1/teachers/{teacherId}`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 講師詳細取得
         * @param {string} teacherId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdGet: async (teacherId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('v1TeachersTeacherIdGet', 'teacherId', teacherId)
            const localVarPath = `/v1/teachers/{teacherId}`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdMailPatch: async (teacherId: string, body: UpdateTeacherMailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('v1TeachersTeacherIdMailPatch', 'teacherId', teacherId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1TeachersTeacherIdMailPatch', 'body', body)
            const localVarPath = `/v1/teachers/{teacherId}/mail`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdPasswordPatch: async (teacherId: string, body: UpdateTeacherPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('v1TeachersTeacherIdPasswordPatch', 'teacherId', teacherId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1TeachersTeacherIdPasswordPatch', 'body', body)
            const localVarPath = `/v1/teachers/{teacherId}/password`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 権限の更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherRoleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdRolePatch: async (teacherId: string, body: UpdateTeacherRoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('v1TeachersTeacherIdRolePatch', 'teacherId', teacherId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1TeachersTeacherIdRolePatch', 'body', body)
            const localVarPath = `/v1/teachers/{teacherId}/role`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 担当教科の更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherSubjectsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdSubjectsPatch: async (teacherId: string, body: UpdateTeacherSubjectsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('v1TeachersTeacherIdSubjectsPatch', 'teacherId', teacherId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1TeachersTeacherIdSubjectsPatch', 'body', body)
            const localVarPath = `/v1/teachers/{teacherId}/subjects`
                .replace(`{${"teacherId"}}`, encodeURIComponent(String(teacherId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeacherApi - functional programming interface
 * @export
 */
export const TeacherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeacherApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 講師一覧取得
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TeachersGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeachersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TeachersGet(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 講師登録
         * @param {CreateTeacherRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TeachersPost(body: CreateTeacherRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TeachersPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 講師削除
         * @param {string} teacherId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TeachersTeacherIdDelete(teacherId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TeachersTeacherIdDelete(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 講師詳細取得
         * @param {string} teacherId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TeachersTeacherIdGet(teacherId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TeachersTeacherIdGet(teacherId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TeachersTeacherIdMailPatch(teacherId: string, body: UpdateTeacherMailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TeachersTeacherIdMailPatch(teacherId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TeachersTeacherIdPasswordPatch(teacherId: string, body: UpdateTeacherPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TeachersTeacherIdPasswordPatch(teacherId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 権限の更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherRoleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TeachersTeacherIdRolePatch(teacherId: string, body: UpdateTeacherRoleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TeachersTeacherIdRolePatch(teacherId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 担当教科の更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherSubjectsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TeachersTeacherIdSubjectsPatch(teacherId: string, body: UpdateTeacherSubjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1TeachersTeacherIdSubjectsPatch(teacherId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeacherApi - factory interface
 * @export
 */
export const TeacherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeacherApiFp(configuration)
    return {
        /**
         * 
         * @summary 講師一覧取得
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersGet(limit?: number, offset?: number, options?: any): AxiosPromise<TeachersResponse> {
            return localVarFp.v1TeachersGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 講師登録
         * @param {CreateTeacherRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersPost(body: CreateTeacherRequest, options?: any): AxiosPromise<TeacherResponse> {
            return localVarFp.v1TeachersPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 講師削除
         * @param {string} teacherId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdDelete(teacherId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1TeachersTeacherIdDelete(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 講師詳細取得
         * @param {string} teacherId 講師ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdGet(teacherId: string, options?: any): AxiosPromise<TeacherResponse> {
            return localVarFp.v1TeachersTeacherIdGet(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdMailPatch(teacherId: string, body: UpdateTeacherMailRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1TeachersTeacherIdMailPatch(teacherId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdPasswordPatch(teacherId: string, body: UpdateTeacherPasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1TeachersTeacherIdPasswordPatch(teacherId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 権限の更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherRoleRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdRolePatch(teacherId: string, body: UpdateTeacherRoleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1TeachersTeacherIdRolePatch(teacherId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 担当教科の更新
         * @param {string} teacherId 講師ID
         * @param {UpdateTeacherSubjectsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TeachersTeacherIdSubjectsPatch(teacherId: string, body: UpdateTeacherSubjectsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1TeachersTeacherIdSubjectsPatch(teacherId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export class TeacherApi extends BaseAPI {
    /**
     * 
     * @summary 講師一覧取得
     * @param {number} [limit] 取得上限 (デフォルト:30)
     * @param {number} [offset] 取得開始位置 (デフォルト:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public v1TeachersGet(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).v1TeachersGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 講師登録
     * @param {CreateTeacherRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public v1TeachersPost(body: CreateTeacherRequest, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).v1TeachersPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 講師削除
     * @param {string} teacherId 講師ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public v1TeachersTeacherIdDelete(teacherId: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).v1TeachersTeacherIdDelete(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 講師詳細取得
     * @param {string} teacherId 講師ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public v1TeachersTeacherIdGet(teacherId: string, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).v1TeachersTeacherIdGet(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メールアドレスの更新
     * @param {string} teacherId 講師ID
     * @param {UpdateTeacherMailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public v1TeachersTeacherIdMailPatch(teacherId: string, body: UpdateTeacherMailRequest, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).v1TeachersTeacherIdMailPatch(teacherId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary パスワードの更新
     * @param {string} teacherId 講師ID
     * @param {UpdateTeacherPasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public v1TeachersTeacherIdPasswordPatch(teacherId: string, body: UpdateTeacherPasswordRequest, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).v1TeachersTeacherIdPasswordPatch(teacherId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 権限の更新
     * @param {string} teacherId 講師ID
     * @param {UpdateTeacherRoleRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public v1TeachersTeacherIdRolePatch(teacherId: string, body: UpdateTeacherRoleRequest, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).v1TeachersTeacherIdRolePatch(teacherId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 担当教科の更新
     * @param {string} teacherId 講師ID
     * @param {UpdateTeacherSubjectsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public v1TeachersTeacherIdSubjectsPatch(teacherId: string, body: UpdateTeacherSubjectsRequest, options?: AxiosRequestConfig) {
        return TeacherApiFp(this.configuration).v1TeachersTeacherIdSubjectsPatch(teacherId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


