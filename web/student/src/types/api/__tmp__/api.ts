/* tslint:disable */
/* eslint-disable */
/**
 * SHS Web
 * 生徒・保護者用API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 生徒ID
     * @type {string}
     * @memberof AuthResponse
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof AuthResponse
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof AuthResponse
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof AuthResponse
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof AuthResponse
     */
    'firstNameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof AuthResponse
     */
    'mail'?: string;
    /**
     * 校種 (1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof AuthResponse
     */
    'schoolType'?: number;
    /**
     * 学年
     * @type {number}
     * @memberof AuthResponse
     */
    'grade'?: number;
    /**
     * 受講科目一覧
     * @type {Array<AuthResponseSubjects>}
     * @memberof AuthResponse
     */
    'subjects'?: Array<AuthResponseSubjects>;
}
/**
 * 
 * @export
 * @interface AuthResponseSubjects
 */
export interface AuthResponseSubjects {
    /**
     * 授業科目ID
     * @type {number}
     * @memberof AuthResponseSubjects
     */
    'id'?: number;
    /**
     * 授業科目名
     * @type {string}
     * @memberof AuthResponseSubjects
     */
    'name'?: string;
    /**
     * 表示色
     * @type {string}
     * @memberof AuthResponseSubjects
     */
    'color'?: string;
    /**
     * 校種
     * @type {number}
     * @memberof AuthResponseSubjects
     */
    'schoolType'?: number;
    /**
     * 登録日時
     * @type {string}
     * @memberof AuthResponseSubjects
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof AuthResponseSubjects
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * ステータスコード
     * @type {number}
     * @memberof ErrorResponse
     */
    'status'?: number;
    /**
     * エラー概要
     * @type {string}
     * @memberof ErrorResponse
     */
    'message'?: string;
    /**
     * エラー詳細
     * @type {string}
     * @memberof ErrorResponse
     */
    'details'?: string;
}
/**
 * 
 * @export
 * @interface LessonsResponse
 */
export interface LessonsResponse {
    /**
     * 授業一覧
     * @type {Array<LessonsResponseLessons>}
     * @memberof LessonsResponse
     */
    'lessons'?: Array<LessonsResponseLessons>;
    /**
     * 講師一覧
     * @type {Array<LessonsResponseTeachers>}
     * @memberof LessonsResponse
     */
    'teachers'?: Array<LessonsResponseTeachers>;
}
/**
 * 
 * @export
 * @interface LessonsResponseLessons
 */
export interface LessonsResponseLessons {
    /**
     * 授業ID
     * @type {number}
     * @memberof LessonsResponseLessons
     */
    'id'?: number;
    /**
     * 授業スケジュールID
     * @type {number}
     * @memberof LessonsResponseLessons
     */
    'shiftId'?: number;
    /**
     * 授業科目ID
     * @type {number}
     * @memberof LessonsResponseLessons
     */
    'subjectId'?: number;
    /**
     * 教室番号
     * @type {number}
     * @memberof LessonsResponseLessons
     */
    'room'?: number;
    /**
     * 講師ID
     * @type {string}
     * @memberof LessonsResponseLessons
     */
    'teacherId'?: string;
    /**
     * 生徒ID
     * @type {string}
     * @memberof LessonsResponseLessons
     */
    'studentId'?: string;
    /**
     * 授業開始日時
     * @type {string}
     * @memberof LessonsResponseLessons
     */
    'startAt'?: string;
    /**
     * 授業終了日時
     * @type {string}
     * @memberof LessonsResponseLessons
     */
    'endAt'?: string;
    /**
     * 備考
     * @type {string}
     * @memberof LessonsResponseLessons
     */
    'notes'?: string;
    /**
     * 登録日時
     * @type {string}
     * @memberof LessonsResponseLessons
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof LessonsResponseLessons
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface LessonsResponseTeachers
 */
export interface LessonsResponseTeachers {
    /**
     * 講師ID
     * @type {string}
     * @memberof LessonsResponseTeachers
     */
    'id'?: string;
    /**
     * 姓
     * @type {string}
     * @memberof LessonsResponseTeachers
     */
    'lastName'?: string;
    /**
     * 名
     * @type {string}
     * @memberof LessonsResponseTeachers
     */
    'firstName'?: string;
    /**
     * 姓(かな)
     * @type {string}
     * @memberof LessonsResponseTeachers
     */
    'lastNameKana'?: string;
    /**
     * 名(かな)
     * @type {string}
     * @memberof LessonsResponseTeachers
     */
    'firstNameKana'?: string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof LessonsResponseTeachers
     */
    'mail'?: string;
}
/**
 * 
 * @export
 * @interface SubjectsResponse
 */
export interface SubjectsResponse {
    /**
     * 授業科目一覧
     * @type {Array<SubjectsResponseSubjects>}
     * @memberof SubjectsResponse
     */
    'subjects'?: Array<SubjectsResponseSubjects>;
}
/**
 * 
 * @export
 * @interface SubjectsResponseSubjects
 */
export interface SubjectsResponseSubjects {
    /**
     * 授業科目ID
     * @type {number}
     * @memberof SubjectsResponseSubjects
     */
    'id'?: number;
    /**
     * 授業科目名
     * @type {string}
     * @memberof SubjectsResponseSubjects
     */
    'name'?: string;
    /**
     * 表示色
     * @type {string}
     * @memberof SubjectsResponseSubjects
     */
    'color'?: string;
    /**
     * 校種 (1:小学校, 2:中学校, 3:高等学校)
     * @type {number}
     * @memberof SubjectsResponseSubjects
     */
    'schoolType'?: number;
    /**
     * 登録日時
     * @type {string}
     * @memberof SubjectsResponseSubjects
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof SubjectsResponseSubjects
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface SubmissionResponse
 */
export interface SubmissionResponse {
    /**
     * 
     * @type {SubmissionResponseSummary}
     * @memberof SubmissionResponse
     */
    'summary'?: SubmissionResponseSummary;
    /**
     * 授業募集詳細(日毎)一覧
     * @type {Array<SubmissionResponseShifts>}
     * @memberof SubmissionResponse
     */
    'shifts'?: Array<SubmissionResponseShifts>;
    /**
     * 授業希望(科目毎)一覧
     * @type {Array<SubmissionTemplateResponseSuggestedLessons>}
     * @memberof SubmissionResponse
     */
    'suggestedLessons'?: Array<SubmissionTemplateResponseSuggestedLessons>;
}
/**
 * 
 * @export
 * @interface SubmissionResponseLessons
 */
export interface SubmissionResponseLessons {
    /**
     * 授業コマID
     * @type {number}
     * @memberof SubmissionResponseLessons
     */
    'id'?: number;
    /**
     * 授業希望フラグ
     * @type {boolean}
     * @memberof SubmissionResponseLessons
     */
    'enabled'?: boolean;
    /**
     * 授業開始時間
     * @type {string}
     * @memberof SubmissionResponseLessons
     */
    'startTime'?: string;
    /**
     * 授業終了時間
     * @type {string}
     * @memberof SubmissionResponseLessons
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface SubmissionResponseShifts
 */
export interface SubmissionResponseShifts {
    /**
     * 授業日
     * @type {string}
     * @memberof SubmissionResponseShifts
     */
    'date'?: string;
    /**
     * 休校フラグ
     * @type {boolean}
     * @memberof SubmissionResponseShifts
     */
    'isClosed'?: boolean;
    /**
     * 授業コマ一覧
     * @type {Array<SubmissionResponseLessons>}
     * @memberof SubmissionResponseShifts
     */
    'lessons'?: Array<SubmissionResponseLessons>;
}
/**
 * 授業希望募集概要
 * @export
 * @interface SubmissionResponseSummary
 */
export interface SubmissionResponseSummary {
    /**
     * 授業希望募集ID
     * @type {number}
     * @memberof SubmissionResponseSummary
     */
    'id'?: number;
    /**
     * 年
     * @type {number}
     * @memberof SubmissionResponseSummary
     */
    'year'?: number;
    /**
     * 月
     * @type {number}
     * @memberof SubmissionResponseSummary
     */
    'month'?: number;
    /**
     * シフト募集ステータス (0:不明, 1:募集前, 2:受付中, 3:締切後)
     * @type {number}
     * @memberof SubmissionResponseSummary
     */
    'shiftStatus'?: number;
    /**
     * シフト提出ステータス (0:不明, 1:未提出, 2:提出済)
     * @type {number}
     * @memberof SubmissionResponseSummary
     */
    'submissionStatus'?: number;
    /**
     * シフト募集開始日時
     * @type {string}
     * @memberof SubmissionResponseSummary
     */
    'openAt'?: string;
    /**
     * シフト募集締切日時
     * @type {string}
     * @memberof SubmissionResponseSummary
     */
    'endAt'?: string;
    /**
     * 登録日時
     * @type {string}
     * @memberof SubmissionResponseSummary
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof SubmissionResponseSummary
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface SubmissionTemplateResponse
 */
export interface SubmissionTemplateResponse {
    /**
     * 授業希望(曜日毎)一覧
     * @type {Array<SubmissionTemplateResponseSchedules>}
     * @memberof SubmissionTemplateResponse
     */
    'schedules'?: Array<SubmissionTemplateResponseSchedules>;
    /**
     * 授業希望(科目毎)一覧
     * @type {Array<SubmissionTemplateResponseSuggestedLessons>}
     * @memberof SubmissionTemplateResponse
     */
    'suggestedLessons'?: Array<SubmissionTemplateResponseSuggestedLessons>;
}
/**
 * 
 * @export
 * @interface SubmissionTemplateResponseLessons
 */
export interface SubmissionTemplateResponseLessons {
    /**
     * 授業希望フラグ
     * @type {boolean}
     * @memberof SubmissionTemplateResponseLessons
     */
    'enabled'?: boolean;
    /**
     * 授業開始時間
     * @type {string}
     * @memberof SubmissionTemplateResponseLessons
     */
    'startTime'?: string;
    /**
     * 授業終了時間
     * @type {string}
     * @memberof SubmissionTemplateResponseLessons
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface SubmissionTemplateResponseSchedules
 */
export interface SubmissionTemplateResponseSchedules {
    /**
     * 曜日 (0:日曜日, 1:月曜日, ..., 6:土曜日)
     * @type {number}
     * @memberof SubmissionTemplateResponseSchedules
     */
    'weekday'?: number;
    /**
     * 授業コマ一覧
     * @type {Array<SubmissionTemplateResponseLessons>}
     * @memberof SubmissionTemplateResponseSchedules
     */
    'lessons'?: Array<SubmissionTemplateResponseLessons>;
}
/**
 * 
 * @export
 * @interface SubmissionTemplateResponseSuggestedLessons
 */
export interface SubmissionTemplateResponseSuggestedLessons {
    /**
     * 授業科目ID
     * @type {number}
     * @memberof SubmissionTemplateResponseSuggestedLessons
     */
    'subjectId'?: number;
    /**
     * 授業希望回数
     * @type {number}
     * @memberof SubmissionTemplateResponseSuggestedLessons
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface SubmissionsResponse
 */
export interface SubmissionsResponse {
    /**
     * 授業希望募集概要一覧
     * @type {Array<SubmissionsResponseSummaries>}
     * @memberof SubmissionsResponse
     */
    'summaries'?: Array<SubmissionsResponseSummaries>;
}
/**
 * 
 * @export
 * @interface SubmissionsResponseSummaries
 */
export interface SubmissionsResponseSummaries {
    /**
     * 授業希望募集ID
     * @type {number}
     * @memberof SubmissionsResponseSummaries
     */
    'id'?: number;
    /**
     * 年
     * @type {number}
     * @memberof SubmissionsResponseSummaries
     */
    'year'?: number;
    /**
     * 月
     * @type {number}
     * @memberof SubmissionsResponseSummaries
     */
    'month'?: number;
    /**
     * 授業希望募集ステータス (0:不明, 1:募集前, 2:受付中, 3:締切後)
     * @type {number}
     * @memberof SubmissionsResponseSummaries
     */
    'shiftStatus'?: number;
    /**
     * 授業希望提出ステータス (0:不明, 1:未提出, 2:提出済)
     * @type {number}
     * @memberof SubmissionsResponseSummaries
     */
    'submissionStatus'?: number;
    /**
     * シフト募集開始日時
     * @type {string}
     * @memberof SubmissionsResponseSummaries
     */
    'openAt'?: string;
    /**
     * シフト募集締切日時
     * @type {string}
     * @memberof SubmissionsResponseSummaries
     */
    'endAt'?: string;
    /**
     * 登録日時
     * @type {string}
     * @memberof SubmissionsResponseSummaries
     */
    'createdAt'?: string;
    /**
     * 更新日時
     * @type {string}
     * @memberof SubmissionsResponseSummaries
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UpdateMyMailRequest
 */
export interface UpdateMyMailRequest {
    /**
     * メールアドレス
     * @type {string}
     * @memberof UpdateMyMailRequest
     */
    'mail'?: string;
}
/**
 * 
 * @export
 * @interface UpdateMyPasswordRequest
 */
export interface UpdateMyPasswordRequest {
    /**
     * パスワード
     * @type {string}
     * @memberof UpdateMyPasswordRequest
     */
    'password'?: string;
    /**
     * パスワード
     * @type {string}
     * @memberof UpdateMyPasswordRequest
     */
    'passwordConfirmation'?: string;
}
/**
 * 
 * @export
 * @interface UpsertSubmissionRequest
 */
export interface UpsertSubmissionRequest {
    /**
     * 希望授業一覧
     * @type {Array<UpsertSubmissionRequestSuggestedLessons>}
     * @memberof UpsertSubmissionRequest
     */
    'suggestedLessons'?: Array<UpsertSubmissionRequestSuggestedLessons>;
    /**
     * 授業希望シフトID一覧
     * @type {Array<number>}
     * @memberof UpsertSubmissionRequest
     */
    'shiftIds'?: Array<number>;
}
/**
 * 
 * @export
 * @interface UpsertSubmissionRequestSuggestedLessons
 */
export interface UpsertSubmissionRequestSuggestedLessons {
    /**
     * 授業科目ID
     * @type {number}
     * @memberof UpsertSubmissionRequestSuggestedLessons
     */
    'subjectId'?: number;
    /**
     * 希望授業回数
     * @type {number}
     * @memberof UpsertSubmissionRequestSuggestedLessons
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface UpsertSubmissionTemplateRequest
 */
export interface UpsertSubmissionTemplateRequest {
    /**
     * 授業希望(曜日毎)一覧
     * @type {Array<SubmissionTemplateResponseSchedules>}
     * @memberof UpsertSubmissionTemplateRequest
     */
    'schedules'?: Array<SubmissionTemplateResponseSchedules>;
    /**
     * 授業希望(科目毎)一覧
     * @type {Array<SubmissionTemplateResponseSuggestedLessons>}
     * @memberof UpsertSubmissionTemplateRequest
     */
    'suggestedLessons'?: Array<SubmissionTemplateResponseSuggestedLessons>;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {UpdateMyMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeMailPatch: async (body: UpdateMyMailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1MeMailPatch', 'body', body)
            const localVarPath = `/v1/me/mail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {UpdateMyPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MePasswordPatch: async (body: UpdateMyPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1MePasswordPatch', 'body', body)
            const localVarPath = `/v1/me/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業希望テンプレート取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeSubmissionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/me/submission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業希望テンプレート更新
         * @param {UpsertSubmissionTemplateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeSubmissionPatch: async (body: UpsertSubmissionTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1MeSubmissionPatch', 'body', body)
            const localVarPath = `/v1/me/submission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {UpdateMyMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MeMailPatch(body: UpdateMyMailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MeMailPatch(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {UpdateMyPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MePasswordPatch(body: UpdateMyPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MePasswordPatch(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業希望テンプレート取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MeSubmissionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionTemplateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MeSubmissionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業希望テンプレート更新
         * @param {UpsertSubmissionTemplateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MeSubmissionPatch(body: UpsertSubmissionTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1MeSubmissionPatch(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary ユーザー情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeGet(options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.v1MeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary メールアドレスの更新
         * @param {UpdateMyMailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeMailPatch(body: UpdateMyMailRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1MeMailPatch(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary パスワードの更新
         * @param {UpdateMyPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MePasswordPatch(body: UpdateMyPasswordRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1MePasswordPatch(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業希望テンプレート取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeSubmissionGet(options?: any): AxiosPromise<SubmissionTemplateResponse> {
            return localVarFp.v1MeSubmissionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業希望テンプレート更新
         * @param {UpsertSubmissionTemplateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeSubmissionPatch(body: UpsertSubmissionTemplateRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1MeSubmissionPatch(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary ユーザー情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1MeGet(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1MeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary メールアドレスの更新
     * @param {UpdateMyMailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1MeMailPatch(body: UpdateMyMailRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1MeMailPatch(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary パスワードの更新
     * @param {UpdateMyPasswordRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1MePasswordPatch(body: UpdateMyPasswordRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1MePasswordPatch(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業希望テンプレート取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1MeSubmissionGet(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1MeSubmissionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業希望テンプレート更新
     * @param {UpsertSubmissionTemplateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public v1MeSubmissionPatch(body: UpsertSubmissionTemplateRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).v1MeSubmissionPatch(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LessonApi - axios parameter creator
 * @export
 */
export const LessonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 授業一覧取得
         * @param {string} [since] 取得開始日 (YYYYMMDD)
         * @param {string} [until] 取得開始日 (YYYYMMDD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LessonsGet: async (since?: string, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/lessons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LessonApi - functional programming interface
 * @export
 */
export const LessonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LessonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 授業一覧取得
         * @param {string} [since] 取得開始日 (YYYYMMDD)
         * @param {string} [until] 取得開始日 (YYYYMMDD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LessonsGet(since?: string, until?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LessonsGet(since, until, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LessonApi - factory interface
 * @export
 */
export const LessonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LessonApiFp(configuration)
    return {
        /**
         * 
         * @summary 授業一覧取得
         * @param {string} [since] 取得開始日 (YYYYMMDD)
         * @param {string} [until] 取得開始日 (YYYYMMDD)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LessonsGet(since?: string, until?: string, options?: any): AxiosPromise<LessonsResponse> {
            return localVarFp.v1LessonsGet(since, until, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LessonApi - object-oriented interface
 * @export
 * @class LessonApi
 * @extends {BaseAPI}
 */
export class LessonApi extends BaseAPI {
    /**
     * 
     * @summary 授業一覧取得
     * @param {string} [since] 取得開始日 (YYYYMMDD)
     * @param {string} [until] 取得開始日 (YYYYMMDD)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    public v1LessonsGet(since?: string, until?: string, options?: AxiosRequestConfig) {
        return LessonApiFp(this.configuration).v1LessonsGet(since, until, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubjectApi - axios parameter creator
 * @export
 */
export const SubjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 授業科目一覧取得
         * @param {number} [type] 校種 (未指定:全校種, 1:小学校, 2:中学校, 3:高等学校)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubjectsGet: async (type?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubjectApi - functional programming interface
 * @export
 */
export const SubjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 授業科目一覧取得
         * @param {number} [type] 校種 (未指定:全校種, 1:小学校, 2:中学校, 3:高等学校)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SubjectsGet(type?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SubjectsGet(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubjectApi - factory interface
 * @export
 */
export const SubjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubjectApiFp(configuration)
    return {
        /**
         * 
         * @summary 授業科目一覧取得
         * @param {number} [type] 校種 (未指定:全校種, 1:小学校, 2:中学校, 3:高等学校)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubjectsGet(type?: number, options?: any): AxiosPromise<SubjectsResponse> {
            return localVarFp.v1SubjectsGet(type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubjectApi - object-oriented interface
 * @export
 * @class SubjectApi
 * @extends {BaseAPI}
 */
export class SubjectApi extends BaseAPI {
    /**
     * 
     * @summary 授業科目一覧取得
     * @param {number} [type] 校種 (未指定:全校種, 1:小学校, 2:中学校, 3:高等学校)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectApi
     */
    public v1SubjectsGet(type?: number, options?: AxiosRequestConfig) {
        return SubjectApiFp(this.configuration).v1SubjectsGet(type, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubmissionApi - axios parameter creator
 * @export
 */
export const SubmissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 授業希望提出状況一覧取得
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubmissionsGet: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/submissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業希望提出状況取得
         * @param {number} summaryId 授業希望募集ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubmissionsSummaryIdGet: async (summaryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'summaryId' is not null or undefined
            assertParamExists('v1SubmissionsSummaryIdGet', 'summaryId', summaryId)
            const localVarPath = `/v1/submissions/{summaryId}`
                .replace(`{${"summaryId"}}`, encodeURIComponent(String(summaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授業希望提出
         * @param {number} summaryId 授業希望募集ID
         * @param {UpsertSubmissionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubmissionsSummaryIdPost: async (summaryId: number, body: UpsertSubmissionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'summaryId' is not null or undefined
            assertParamExists('v1SubmissionsSummaryIdPost', 'summaryId', summaryId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('v1SubmissionsSummaryIdPost', 'body', body)
            const localVarPath = `/v1/submissions/{summaryId}`
                .replace(`{${"summaryId"}}`, encodeURIComponent(String(summaryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubmissionApi - functional programming interface
 * @export
 */
export const SubmissionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubmissionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 授業希望提出状況一覧取得
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SubmissionsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SubmissionsGet(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業希望提出状況取得
         * @param {number} summaryId 授業希望募集ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SubmissionsSummaryIdGet(summaryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SubmissionsSummaryIdGet(summaryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授業希望提出
         * @param {number} summaryId 授業希望募集ID
         * @param {UpsertSubmissionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SubmissionsSummaryIdPost(summaryId: number, body: UpsertSubmissionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SubmissionsSummaryIdPost(summaryId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubmissionApi - factory interface
 * @export
 */
export const SubmissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubmissionApiFp(configuration)
    return {
        /**
         * 
         * @summary 授業希望提出状況一覧取得
         * @param {number} [limit] 取得上限 (デフォルト:30)
         * @param {number} [offset] 取得開始位置 (デフォルト:0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubmissionsGet(limit?: number, offset?: number, options?: any): AxiosPromise<SubmissionsResponse> {
            return localVarFp.v1SubmissionsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業希望提出状況取得
         * @param {number} summaryId 授業希望募集ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubmissionsSummaryIdGet(summaryId: number, options?: any): AxiosPromise<SubmissionResponse> {
            return localVarFp.v1SubmissionsSummaryIdGet(summaryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授業希望提出
         * @param {number} summaryId 授業希望募集ID
         * @param {UpsertSubmissionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SubmissionsSummaryIdPost(summaryId: number, body: UpsertSubmissionRequest, options?: any): AxiosPromise<SubmissionResponse> {
            return localVarFp.v1SubmissionsSummaryIdPost(summaryId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubmissionApi - object-oriented interface
 * @export
 * @class SubmissionApi
 * @extends {BaseAPI}
 */
export class SubmissionApi extends BaseAPI {
    /**
     * 
     * @summary 授業希望提出状況一覧取得
     * @param {number} [limit] 取得上限 (デフォルト:30)
     * @param {number} [offset] 取得開始位置 (デフォルト:0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApi
     */
    public v1SubmissionsGet(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return SubmissionApiFp(this.configuration).v1SubmissionsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業希望提出状況取得
     * @param {number} summaryId 授業希望募集ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApi
     */
    public v1SubmissionsSummaryIdGet(summaryId: number, options?: AxiosRequestConfig) {
        return SubmissionApiFp(this.configuration).v1SubmissionsSummaryIdGet(summaryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授業希望提出
     * @param {number} summaryId 授業希望募集ID
     * @param {UpsertSubmissionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApi
     */
    public v1SubmissionsSummaryIdPost(summaryId: number, body: UpsertSubmissionRequest, options?: AxiosRequestConfig) {
        return SubmissionApiFp(this.configuration).v1SubmissionsSummaryIdPost(summaryId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


