syntax = "proto3";

package lesson;

option go_package = "github.com/calmato/shs-web/api/proto/lesson";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

import "lesson/common.proto";
import "lesson/lesson.proto";
import "lesson/shift.proto";
import "lesson/shift_summary.proto";
import "lesson/teacher_submission.proto";
import "lesson/teacher_shift.proto";
import "lesson/student_submission.proto";
import "lesson/student_shift.proto";

service LessonService {
  rpc ListLessons(ListLessonsRequest) returns (ListLessonsResponse);
  rpc CreateLesson(CreateLessonRequest) returns (CreateLessonResponse);
  rpc UpdateLesson(UpdateLessonRequest) returns (UpdateLessonResponse);
  rpc DeleteLesson(DeleteLessonRequest) returns (DeleteLessonResponse);
  rpc ListShiftSummaries(ListShiftSummariesRequest) returns (ListShiftSummariesResponse);
  rpc GetShiftSummary(GetShiftSummaryRequest) returns (GetShiftSummaryResponse);
  rpc UpdateShiftSummarySchedule(UpdateShiftSummaryScheduleRequest) returns (UpdateShiftSummaryShceduleResponse);
  rpc UpdateShiftSummaryDecided(UpdateShiftSummaryDecidedRequest) returns (UpdateShiftSummaryDecidedResponse);
  rpc DeleteShiftSummary(DeleteShiftSummaryRequest) returns (DeleteShiftSummaryResponse);
  rpc ListShifts(ListShiftsRequest) returns (ListShiftsResponse);
  rpc CreateShifts(CreateShiftsRequest) returns (CreateShiftsResponse);
  rpc ListSubmissions(ListSubmissionsRequest) returns (ListSubmissionsResponse);
  rpc ListTeacherSubmissionsByShiftSummaryIDs(ListTeacherSubmissionsByShiftSummaryIDsRequest) returns (ListTeacherSubmissionsByShiftSummaryIDsResponse);
  rpc ListTeacherShifts(ListTeacherShiftsRequest) returns (ListTeacherShiftsResponse);
  rpc GetTeacherShifts(GetTeacherShiftsRequest) returns (GetTeacherShiftsResponse);
  rpc UpsertTeacherShifts(UpsertTeacherShiftsRequest) returns (UpsertTeacherShiftsResponse);
  rpc ListStudentSubmissionsByStudentIDs(ListStudentSubmissionsByStudentIDsRequest) returns (ListStudentSubmissionsByStudentIDsResponse);
  rpc ListStudentSubmissionsByShiftSummaryIDs(ListStudentSubmissionsByShiftSummaryIDsRequest) returns (ListStudentSubmissionsByShiftSummaryIDsResponse);
  rpc ListStudentShifts(ListStudentShiftsRequest) returns (ListStudentShiftsResponse);
  rpc GetStudentShifts(GetStudentShiftsRequest) returns (GetStudentShiftsResponse);
  rpc UpsertStudentShifts(UpsertStudentShiftsRequest) returns (UpsertStudentShiftsResponse);
}

message ListLessonsRequest {
  int64  shift_summary_id = 1 [(validate.rules).int64 = { gte: 0 }];
  int64  shift_id         = 2 [(validate.rules).int64 = { gte: 0 }];
  string teacher_id       = 3;
  string student_id       = 4;
  bool   only_decided     = 5;
}

message ListLessonsResponse {
  repeated Lesson lessons = 1;
  repeated Shift  shifts  = 2;
  int64           total   = 3;
}

message CreateLessonRequest {
  int64  shift_summary_id = 1 [(validate.rules).int64 = { gt: 0 }];
  int64  shift_id         = 2 [(validate.rules).int64 = { gt: 0 }];
  int64  subject_id       = 3 [(validate.rules).int64 = { gt: 0 }];
  int32  room_id          = 4 [(validate.rules).int32 = { gt: 0 }];
  string teacher_id       = 5 [(validate.rules).string = { min_len: 1 }];
  string student_id       = 6 [(validate.rules).string = { min_len: 1 }];
  string notes            = 7 [(validate.rules).string = { max_len: 200 }];
}

message CreateLessonResponse {
  Lesson lesson = 1;
  Shift  shift  = 2;
}

message UpdateLessonRequest {
  int64  lesson_id        = 1 [(validate.rules).int64 = { gt: 0 }];
  int64  shift_summary_id = 2 [(validate.rules).int64 = { gt: 0 }];
  int64  shift_id         = 3 [(validate.rules).int64 = { gt: 0 }];
  int64  subject_id       = 4 [(validate.rules).int64 = { gt: 0 }];
  int32  room_id          = 5 [(validate.rules).int32 = { gt: 0 }];
  string teacher_id       = 6 [(validate.rules).string = { min_len: 1 }];
  string student_id       = 7 [(validate.rules).string = { min_len: 1 }];
  string notes            = 8 [(validate.rules).string = { max_len: 200 }];
}

message UpdateLessonResponse {}

message DeleteLessonRequest {
  int64 lesson_id = 1 [(validate.rules).int64 = { gt: 0 }];
}

message DeleteLessonResponse {}

message ListShiftSummariesRequest {
  enum OrderBy {
    ORDER_BY_YEAR_MONTH_NONE = 0;
    ORDER_BY_YEAR_MONTH_ASC  = 1;
    ORDER_BY_YEAR_MONTH_DESC = 2;
  }
  int64       limit    = 1 [(validate.rules).int64 = { gte: 0 }];
  int64       offset   = 2 [(validate.rules).int64 = { gte: 0 }];
  ShiftStatus status   = 3 [(validate.rules).enum = { defined_only: true }];
  OrderBy     order_by = 4 [(validate.rules).enum = { defined_only: true }];
}

message ListShiftSummariesResponse {
  repeated ShiftSummary summaries = 1;
  int64                 total     = 2;
}

message GetShiftSummaryRequest {
  int64 id = 1 [(validate.rules).int64 = { gt: 0 }];
}

message GetShiftSummaryResponse {
  ShiftSummary summary = 1;
}

message UpdateShiftSummaryScheduleRequest {
  int64 id      = 1 [(validate.rules).int64 = { gt: 0 }];
  int64 open_at = 2 [(validate.rules).int64 = { gt: 0 }];
  int64 end_at  = 3 [(validate.rules).int64 = { gt: 0 }];
}

message UpdateShiftSummaryShceduleResponse {}

message UpdateShiftSummaryDecidedRequest {
  int64 id      = 1 [(validate.rules).int64 = { gt: 0 }];
  bool  decided = 2;
}

message UpdateShiftSummaryDecidedResponse {}

message DeleteShiftSummaryRequest {
  int64 id = 1 [(validate.rules).int64 = { gt: 0 }];
}

message DeleteShiftSummaryResponse {}

message ListShiftsRequest {
  int64 shift_summary_id = 1 [(validate.rules).int64 = { gte: 0 }];
  int64 shift_id         = 2 [(validate.rules).int64 = { gte: 0 }];
}

message ListShiftsResponse {
  repeated Shift shifts = 1;
}

message CreateShiftsRequest {
  int32           year_month   = 1 [(validate.rules).int32 = { gte: 100000, lt: 1000000 }];
  int64           open_at      = 2 [(validate.rules).int64 = { gt: 0 }];
  int64           end_at       = 3 [(validate.rules).int64 = { gt: 0 }];
  repeated string closed_dates = 4 [(validate.rules).repeated = { unique: true, items: { string: { len: 8, pattern: "^[0-9]*$" }}}];
}

message CreateShiftsResponse {
  ShiftSummary   summary = 1;
  repeated Shift shifts  = 2;
}

message ListSubmissionsRequest {
  int64 shift_id = 1 [(validate.rules).int64 = { gt: 0 }];
}

message ListSubmissionsResponse {
  repeated TeacherShift teacher_shifts = 1;
  repeated StudentShift student_shifts = 2;
}

message ListTeacherSubmissionsByShiftSummaryIDsRequest {
  string         teacher_id        = 1 [(validate.rules).string = { min_len: 1 }];
  repeated int64 shift_summary_ids = 2 [(validate.rules).repeated = { unique: true, items: { int64: { gt: 0 }}}];
}

message ListTeacherSubmissionsByShiftSummaryIDsResponse {
  repeated TeacherSubmission submissions = 1;
}

message ListTeacherShiftsRequest {
  repeated string teacher_ids      = 1 [(validate.rules).repeated = { unique: true, items: { string: { min_len: 1 }}}];
  int64           shift_summary_id = 2 [(validate.rules).int64 = { gt: 0 }];
}

message ListTeacherShiftsResponse {
  repeated TeacherShift shifts = 1;
}

message GetTeacherShiftsRequest {
  string teacher_id       = 1 [(validate.rules).string = { min_len: 1 }];
  int64  shift_summary_id = 2 [(validate.rules).int64 = { gt: 0 }];
}

message GetTeacherShiftsResponse {
  TeacherSubmission     submission = 1;
  repeated TeacherShift shifts     = 2;
}

message UpsertTeacherShiftsRequest {
  string         teacher_id       = 1 [(validate.rules).string = { min_len: 1 }];
  int64          shift_summary_id = 2 [(validate.rules).int64 = { gt: 0 }];
  repeated int64 shift_ids        = 3 [(validate.rules).repeated = { unique: true, items: { int64: { gt: 0 }}}];
  bool           decided          = 4;
}

message UpsertTeacherShiftsResponse {
  TeacherSubmission     submission = 1;
  repeated TeacherShift shifts     = 2;
}

message ListStudentSubmissionsByStudentIDsRequest {
  repeated string student_ids      = 1 [(validate.rules).repeated = { unique: true, items: { string: { min_len: 1 }}}];
  int64           shift_summary_id = 2 [(validate.rules).int64 = { gt: 0 }];
}

message ListStudentSubmissionsByStudentIDsResponse {
  repeated StudentSubmission submissions = 1;
}

message ListStudentSubmissionsByShiftSummaryIDsRequest {
  string         student_id        = 1 [(validate.rules).string = { min_len: 1 }];
  repeated int64 shift_summary_ids = 2 [(validate.rules).repeated = { unique: true, items: { int64: { gt: 0 }}}];
}

message ListStudentSubmissionsByShiftSummaryIDsResponse {
  repeated StudentSubmission submissions = 1;
}

message ListStudentShiftsRequest {
  repeated string student_ids      = 1 [(validate.rules).repeated = { unique: true, items: { string: { min_len: 1 }}}];
  int64           shift_summary_id = 2 [(validate.rules).int64 = { gt: 0 }];
}

message ListStudentShiftsResponse {
  repeated StudentShift shifts = 1;
}

message GetStudentShiftsRequest {
  string student_id       = 1 [(validate.rules).string = { min_len: 1 }];
  int64  shift_summary_id = 2 [(validate.rules).int64 = { gt: 0 }];
}

message GetStudentShiftsResponse {
  StudentSubmission     submission = 1;
  repeated StudentShift shifts     = 2;
}

message UpsertStudentShiftsRequest {
  string                          student_id        = 1 [(validate.rules).string = { min_len: 1 }];
  int64                           shift_summary_id  = 2 [(validate.rules).int64 = { gt: 0 }];
  repeated int64                  shift_ids         = 3 [(validate.rules).repeated = { unique: true, items: { int64: { gt: 0 }}}];
  bool                            decided           = 4;
  // int64                           suggested_classes = 5 [(validate.rules).int64 = { gte: 0 }];
  repeated StudentSuggestedLesson lessons = 6 [(validate.rules).repeated = { items: { message: { required: true }}}];
  reserved 5;
}

message StudentSuggestedLesson {
  int64 subject_id = 1 [(validate.rules).int64 = { gt: 0 }];
  int64 total      = 2 [(validate.rules).int64 = { gte: 0 }];
}

message UpsertStudentShiftsResponse {
  StudentSubmission     submission = 1;
  repeated StudentShift shifts     = 2;
}
