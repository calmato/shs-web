// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/lesson/service_grpc.pb.go

// Package mock_lesson is a generated GoMock package.
package mock_lesson

import (
	context "context"
	reflect "reflect"

	lesson "github.com/calmato/shs-web/api/proto/lesson"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockLessonServiceClient is a mock of LessonServiceClient interface.
type MockLessonServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLessonServiceClientMockRecorder
}

// MockLessonServiceClientMockRecorder is the mock recorder for MockLessonServiceClient.
type MockLessonServiceClientMockRecorder struct {
	mock *MockLessonServiceClient
}

// NewMockLessonServiceClient creates a new mock instance.
func NewMockLessonServiceClient(ctrl *gomock.Controller) *MockLessonServiceClient {
	mock := &MockLessonServiceClient{ctrl: ctrl}
	mock.recorder = &MockLessonServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLessonServiceClient) EXPECT() *MockLessonServiceClientMockRecorder {
	return m.recorder
}

// CreateShifts mocks base method.
func (m *MockLessonServiceClient) CreateShifts(ctx context.Context, in *lesson.CreateShiftsRequest, opts ...grpc.CallOption) (*lesson.CreateShiftsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateShifts", varargs...)
	ret0, _ := ret[0].(*lesson.CreateShiftsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShifts indicates an expected call of CreateShifts.
func (mr *MockLessonServiceClientMockRecorder) CreateShifts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShifts", reflect.TypeOf((*MockLessonServiceClient)(nil).CreateShifts), varargs...)
}

// MockLessonServiceServer is a mock of LessonServiceServer interface.
type MockLessonServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLessonServiceServerMockRecorder
}

// MockLessonServiceServerMockRecorder is the mock recorder for MockLessonServiceServer.
type MockLessonServiceServerMockRecorder struct {
	mock *MockLessonServiceServer
}

// NewMockLessonServiceServer creates a new mock instance.
func NewMockLessonServiceServer(ctrl *gomock.Controller) *MockLessonServiceServer {
	mock := &MockLessonServiceServer{ctrl: ctrl}
	mock.recorder = &MockLessonServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLessonServiceServer) EXPECT() *MockLessonServiceServerMockRecorder {
	return m.recorder
}

// CreateShifts mocks base method.
func (m *MockLessonServiceServer) CreateShifts(arg0 context.Context, arg1 *lesson.CreateShiftsRequest) (*lesson.CreateShiftsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShifts", arg0, arg1)
	ret0, _ := ret[0].(*lesson.CreateShiftsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShifts indicates an expected call of CreateShifts.
func (mr *MockLessonServiceServerMockRecorder) CreateShifts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShifts", reflect.TypeOf((*MockLessonServiceServer)(nil).CreateShifts), arg0, arg1)
}

// mustEmbedUnimplementedLessonServiceServer mocks base method.
func (m *MockLessonServiceServer) mustEmbedUnimplementedLessonServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLessonServiceServer")
}

// mustEmbedUnimplementedLessonServiceServer indicates an expected call of mustEmbedUnimplementedLessonServiceServer.
func (mr *MockLessonServiceServerMockRecorder) mustEmbedUnimplementedLessonServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLessonServiceServer", reflect.TypeOf((*MockLessonServiceServer)(nil).mustEmbedUnimplementedLessonServiceServer))
}

// MockUnsafeLessonServiceServer is a mock of UnsafeLessonServiceServer interface.
type MockUnsafeLessonServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLessonServiceServerMockRecorder
}

// MockUnsafeLessonServiceServerMockRecorder is the mock recorder for MockUnsafeLessonServiceServer.
type MockUnsafeLessonServiceServerMockRecorder struct {
	mock *MockUnsafeLessonServiceServer
}

// NewMockUnsafeLessonServiceServer creates a new mock instance.
func NewMockUnsafeLessonServiceServer(ctrl *gomock.Controller) *MockUnsafeLessonServiceServer {
	mock := &MockUnsafeLessonServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLessonServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLessonServiceServer) EXPECT() *MockUnsafeLessonServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLessonServiceServer mocks base method.
func (m *MockUnsafeLessonServiceServer) mustEmbedUnimplementedLessonServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLessonServiceServer")
}

// mustEmbedUnimplementedLessonServiceServer indicates an expected call of mustEmbedUnimplementedLessonServiceServer.
func (mr *MockUnsafeLessonServiceServerMockRecorder) mustEmbedUnimplementedLessonServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLessonServiceServer", reflect.TypeOf((*MockUnsafeLessonServiceServer)(nil).mustEmbedUnimplementedLessonServiceServer))
}
