// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/classroom/service_grpc.pb.go

// Package mock_classroom is a generated GoMock package.
package mock_classroom

import (
	context "context"
	reflect "reflect"

	classroom "github.com/calmato/shs-web/api/proto/classroom"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockClassroomServiceClient is a mock of ClassroomServiceClient interface.
type MockClassroomServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockClassroomServiceClientMockRecorder
}

// MockClassroomServiceClientMockRecorder is the mock recorder for MockClassroomServiceClient.
type MockClassroomServiceClientMockRecorder struct {
	mock *MockClassroomServiceClient
}

// NewMockClassroomServiceClient creates a new mock instance.
func NewMockClassroomServiceClient(ctrl *gomock.Controller) *MockClassroomServiceClient {
	mock := &MockClassroomServiceClient{ctrl: ctrl}
	mock.recorder = &MockClassroomServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassroomServiceClient) EXPECT() *MockClassroomServiceClientMockRecorder {
	return m.recorder
}

// GetSubject mocks base method.
func (m *MockClassroomServiceClient) GetSubject(ctx context.Context, in *classroom.GetSubjectRequest, opts ...grpc.CallOption) (*classroom.GetSubjectResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubject", varargs...)
	ret0, _ := ret[0].(*classroom.GetSubjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MockClassroomServiceClientMockRecorder) GetSubject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*MockClassroomServiceClient)(nil).GetSubject), varargs...)
}

// ListSubjects mocks base method.
func (m *MockClassroomServiceClient) ListSubjects(ctx context.Context, in *classroom.ListSubjectsRequest, opts ...grpc.CallOption) (*classroom.ListSubjectsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubjects", varargs...)
	ret0, _ := ret[0].(*classroom.ListSubjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubjects indicates an expected call of ListSubjects.
func (mr *MockClassroomServiceClientMockRecorder) ListSubjects(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjects", reflect.TypeOf((*MockClassroomServiceClient)(nil).ListSubjects), varargs...)
}

// MultiGetSubjects mocks base method.
func (m *MockClassroomServiceClient) MultiGetSubjects(ctx context.Context, in *classroom.MultiGetSubjectsRequest, opts ...grpc.CallOption) (*classroom.MultiGetSubjectsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MultiGetSubjects", varargs...)
	ret0, _ := ret[0].(*classroom.MultiGetSubjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetSubjects indicates an expected call of MultiGetSubjects.
func (mr *MockClassroomServiceClientMockRecorder) MultiGetSubjects(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetSubjects", reflect.TypeOf((*MockClassroomServiceClient)(nil).MultiGetSubjects), varargs...)
}

// MockClassroomServiceServer is a mock of ClassroomServiceServer interface.
type MockClassroomServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockClassroomServiceServerMockRecorder
}

// MockClassroomServiceServerMockRecorder is the mock recorder for MockClassroomServiceServer.
type MockClassroomServiceServerMockRecorder struct {
	mock *MockClassroomServiceServer
}

// NewMockClassroomServiceServer creates a new mock instance.
func NewMockClassroomServiceServer(ctrl *gomock.Controller) *MockClassroomServiceServer {
	mock := &MockClassroomServiceServer{ctrl: ctrl}
	mock.recorder = &MockClassroomServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassroomServiceServer) EXPECT() *MockClassroomServiceServerMockRecorder {
	return m.recorder
}

// GetSubject mocks base method.
func (m *MockClassroomServiceServer) GetSubject(arg0 context.Context, arg1 *classroom.GetSubjectRequest) (*classroom.GetSubjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubject", arg0, arg1)
	ret0, _ := ret[0].(*classroom.GetSubjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MockClassroomServiceServerMockRecorder) GetSubject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*MockClassroomServiceServer)(nil).GetSubject), arg0, arg1)
}

// ListSubjects mocks base method.
func (m *MockClassroomServiceServer) ListSubjects(arg0 context.Context, arg1 *classroom.ListSubjectsRequest) (*classroom.ListSubjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubjects", arg0, arg1)
	ret0, _ := ret[0].(*classroom.ListSubjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubjects indicates an expected call of ListSubjects.
func (mr *MockClassroomServiceServerMockRecorder) ListSubjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjects", reflect.TypeOf((*MockClassroomServiceServer)(nil).ListSubjects), arg0, arg1)
}

// MultiGetSubjects mocks base method.
func (m *MockClassroomServiceServer) MultiGetSubjects(arg0 context.Context, arg1 *classroom.MultiGetSubjectsRequest) (*classroom.MultiGetSubjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetSubjects", arg0, arg1)
	ret0, _ := ret[0].(*classroom.MultiGetSubjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetSubjects indicates an expected call of MultiGetSubjects.
func (mr *MockClassroomServiceServerMockRecorder) MultiGetSubjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetSubjects", reflect.TypeOf((*MockClassroomServiceServer)(nil).MultiGetSubjects), arg0, arg1)
}

// mustEmbedUnimplementedClassroomServiceServer mocks base method.
func (m *MockClassroomServiceServer) mustEmbedUnimplementedClassroomServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClassroomServiceServer")
}

// mustEmbedUnimplementedClassroomServiceServer indicates an expected call of mustEmbedUnimplementedClassroomServiceServer.
func (mr *MockClassroomServiceServerMockRecorder) mustEmbedUnimplementedClassroomServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClassroomServiceServer", reflect.TypeOf((*MockClassroomServiceServer)(nil).mustEmbedUnimplementedClassroomServiceServer))
}

// MockUnsafeClassroomServiceServer is a mock of UnsafeClassroomServiceServer interface.
type MockUnsafeClassroomServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeClassroomServiceServerMockRecorder
}

// MockUnsafeClassroomServiceServerMockRecorder is the mock recorder for MockUnsafeClassroomServiceServer.
type MockUnsafeClassroomServiceServerMockRecorder struct {
	mock *MockUnsafeClassroomServiceServer
}

// NewMockUnsafeClassroomServiceServer creates a new mock instance.
func NewMockUnsafeClassroomServiceServer(ctrl *gomock.Controller) *MockUnsafeClassroomServiceServer {
	mock := &MockUnsafeClassroomServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeClassroomServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeClassroomServiceServer) EXPECT() *MockUnsafeClassroomServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedClassroomServiceServer mocks base method.
func (m *MockUnsafeClassroomServiceServer) mustEmbedUnimplementedClassroomServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedClassroomServiceServer")
}

// mustEmbedUnimplementedClassroomServiceServer indicates an expected call of mustEmbedUnimplementedClassroomServiceServer.
func (mr *MockUnsafeClassroomServiceServerMockRecorder) mustEmbedUnimplementedClassroomServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedClassroomServiceServer", reflect.TypeOf((*MockUnsafeClassroomServiceServer)(nil).mustEmbedUnimplementedClassroomServiceServer))
}
