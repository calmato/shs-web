// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/messenger/service_grpc.pb.go

// Package mock_messenger is a generated GoMock package.
package mock_messenger

import (
	context "context"
	reflect "reflect"

	messenger "github.com/calmato/shs-web/api/proto/messenger"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMessengerServiceClient is a mock of MessengerServiceClient interface.
type MockMessengerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerServiceClientMockRecorder
}

// MockMessengerServiceClientMockRecorder is the mock recorder for MockMessengerServiceClient.
type MockMessengerServiceClientMockRecorder struct {
	mock *MockMessengerServiceClient
}

// NewMockMessengerServiceClient creates a new mock instance.
func NewMockMessengerServiceClient(ctrl *gomock.Controller) *MockMessengerServiceClient {
	mock := &MockMessengerServiceClient{ctrl: ctrl}
	mock.recorder = &MockMessengerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessengerServiceClient) EXPECT() *MockMessengerServiceClientMockRecorder {
	return m.recorder
}

// NotifyLessonDecided mocks base method.
func (m *MockMessengerServiceClient) NotifyLessonDecided(ctx context.Context, in *messenger.NotifyLessonDecidedRequest, opts ...grpc.CallOption) (*messenger.NotifyLessonDecidedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotifyLessonDecided", varargs...)
	ret0, _ := ret[0].(*messenger.NotifyLessonDecidedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyLessonDecided indicates an expected call of NotifyLessonDecided.
func (mr *MockMessengerServiceClientMockRecorder) NotifyLessonDecided(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyLessonDecided", reflect.TypeOf((*MockMessengerServiceClient)(nil).NotifyLessonDecided), varargs...)
}

// MockMessengerServiceServer is a mock of MessengerServiceServer interface.
type MockMessengerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerServiceServerMockRecorder
}

// MockMessengerServiceServerMockRecorder is the mock recorder for MockMessengerServiceServer.
type MockMessengerServiceServerMockRecorder struct {
	mock *MockMessengerServiceServer
}

// NewMockMessengerServiceServer creates a new mock instance.
func NewMockMessengerServiceServer(ctrl *gomock.Controller) *MockMessengerServiceServer {
	mock := &MockMessengerServiceServer{ctrl: ctrl}
	mock.recorder = &MockMessengerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessengerServiceServer) EXPECT() *MockMessengerServiceServerMockRecorder {
	return m.recorder
}

// NotifyLessonDecided mocks base method.
func (m *MockMessengerServiceServer) NotifyLessonDecided(arg0 context.Context, arg1 *messenger.NotifyLessonDecidedRequest) (*messenger.NotifyLessonDecidedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyLessonDecided", arg0, arg1)
	ret0, _ := ret[0].(*messenger.NotifyLessonDecidedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyLessonDecided indicates an expected call of NotifyLessonDecided.
func (mr *MockMessengerServiceServerMockRecorder) NotifyLessonDecided(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyLessonDecided", reflect.TypeOf((*MockMessengerServiceServer)(nil).NotifyLessonDecided), arg0, arg1)
}

// mustEmbedUnimplementedMessengerServiceServer mocks base method.
func (m *MockMessengerServiceServer) mustEmbedUnimplementedMessengerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMessengerServiceServer")
}

// mustEmbedUnimplementedMessengerServiceServer indicates an expected call of mustEmbedUnimplementedMessengerServiceServer.
func (mr *MockMessengerServiceServerMockRecorder) mustEmbedUnimplementedMessengerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMessengerServiceServer", reflect.TypeOf((*MockMessengerServiceServer)(nil).mustEmbedUnimplementedMessengerServiceServer))
}

// MockUnsafeMessengerServiceServer is a mock of UnsafeMessengerServiceServer interface.
type MockUnsafeMessengerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMessengerServiceServerMockRecorder
}

// MockUnsafeMessengerServiceServerMockRecorder is the mock recorder for MockUnsafeMessengerServiceServer.
type MockUnsafeMessengerServiceServerMockRecorder struct {
	mock *MockUnsafeMessengerServiceServer
}

// NewMockUnsafeMessengerServiceServer creates a new mock instance.
func NewMockUnsafeMessengerServiceServer(ctrl *gomock.Controller) *MockUnsafeMessengerServiceServer {
	mock := &MockUnsafeMessengerServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMessengerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMessengerServiceServer) EXPECT() *MockUnsafeMessengerServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMessengerServiceServer mocks base method.
func (m *MockUnsafeMessengerServiceServer) mustEmbedUnimplementedMessengerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMessengerServiceServer")
}

// mustEmbedUnimplementedMessengerServiceServer indicates an expected call of mustEmbedUnimplementedMessengerServiceServer.
func (mr *MockUnsafeMessengerServiceServerMockRecorder) mustEmbedUnimplementedMessengerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMessengerServiceServer", reflect.TypeOf((*MockUnsafeMessengerServiceServer)(nil).mustEmbedUnimplementedMessengerServiceServer))
}
