// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go

// Package mock_validation is a generated GoMock package.
package mock_validation

import (
	reflect "reflect"

	classroom "github.com/calmato/shs-web/api/proto/classroom"
	gomock "github.com/golang/mock/gomock"
)

// MockRequestValidation is a mock of RequestValidation interface.
type MockRequestValidation struct {
	ctrl     *gomock.Controller
	recorder *MockRequestValidationMockRecorder
}

// MockRequestValidationMockRecorder is the mock recorder for MockRequestValidation.
type MockRequestValidationMockRecorder struct {
	mock *MockRequestValidation
}

// NewMockRequestValidation creates a new mock instance.
func NewMockRequestValidation(ctrl *gomock.Controller) *MockRequestValidation {
	mock := &MockRequestValidation{ctrl: ctrl}
	mock.recorder = &MockRequestValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestValidation) EXPECT() *MockRequestValidationMockRecorder {
	return m.recorder
}

// CreateSubject mocks base method.
func (m *MockRequestValidation) CreateSubject(req *classroom.CreateSubjectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubject", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubject indicates an expected call of CreateSubject.
func (mr *MockRequestValidationMockRecorder) CreateSubject(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubject", reflect.TypeOf((*MockRequestValidation)(nil).CreateSubject), req)
}

// DeleteSubject mocks base method.
func (m *MockRequestValidation) DeleteSubject(req *classroom.DeleteSubjectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubject", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubject indicates an expected call of DeleteSubject.
func (mr *MockRequestValidationMockRecorder) DeleteSubject(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubject", reflect.TypeOf((*MockRequestValidation)(nil).DeleteSubject), req)
}

// GetRoom mocks base method.
func (m *MockRequestValidation) GetRoom(req *classroom.GetRoomRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockRequestValidationMockRecorder) GetRoom(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockRequestValidation)(nil).GetRoom), req)
}

// GetRoomsTotal mocks base method.
func (m *MockRequestValidation) GetRoomsTotal(req *classroom.GetRoomsTotalRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomsTotal", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRoomsTotal indicates an expected call of GetRoomsTotal.
func (mr *MockRequestValidationMockRecorder) GetRoomsTotal(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomsTotal", reflect.TypeOf((*MockRequestValidation)(nil).GetRoomsTotal), req)
}

// GetSchedule mocks base method.
func (m *MockRequestValidation) GetSchedule(req *classroom.GetScheduleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedule", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSchedule indicates an expected call of GetSchedule.
func (mr *MockRequestValidationMockRecorder) GetSchedule(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedule", reflect.TypeOf((*MockRequestValidation)(nil).GetSchedule), req)
}

// GetStudentSubject mocks base method.
func (m *MockRequestValidation) GetStudentSubject(req *classroom.GetStudentSubjectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentSubject", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStudentSubject indicates an expected call of GetStudentSubject.
func (mr *MockRequestValidationMockRecorder) GetStudentSubject(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentSubject", reflect.TypeOf((*MockRequestValidation)(nil).GetStudentSubject), req)
}

// GetSubject mocks base method.
func (m *MockRequestValidation) GetSubject(req *classroom.GetSubjectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubject", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MockRequestValidationMockRecorder) GetSubject(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*MockRequestValidation)(nil).GetSubject), req)
}

// GetTeacherSubject mocks base method.
func (m *MockRequestValidation) GetTeacherSubject(req *classroom.GetTeacherSubjectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacherSubject", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTeacherSubject indicates an expected call of GetTeacherSubject.
func (mr *MockRequestValidationMockRecorder) GetTeacherSubject(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacherSubject", reflect.TypeOf((*MockRequestValidation)(nil).GetTeacherSubject), req)
}

// ListSchedules mocks base method.
func (m *MockRequestValidation) ListSchedules(req *classroom.ListSchedulesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedules", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchedules indicates an expected call of ListSchedules.
func (mr *MockRequestValidationMockRecorder) ListSchedules(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedules", reflect.TypeOf((*MockRequestValidation)(nil).ListSchedules), req)
}

// ListSubjects mocks base method.
func (m *MockRequestValidation) ListSubjects(req *classroom.ListSubjectsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubjects", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSubjects indicates an expected call of ListSubjects.
func (mr *MockRequestValidationMockRecorder) ListSubjects(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjects", reflect.TypeOf((*MockRequestValidation)(nil).ListSubjects), req)
}

// MultiGetStudentSubjects mocks base method.
func (m *MockRequestValidation) MultiGetStudentSubjects(req *classroom.MultiGetStudentSubjectsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetStudentSubjects", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultiGetStudentSubjects indicates an expected call of MultiGetStudentSubjects.
func (mr *MockRequestValidationMockRecorder) MultiGetStudentSubjects(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetStudentSubjects", reflect.TypeOf((*MockRequestValidation)(nil).MultiGetStudentSubjects), req)
}

// MultiGetSubjects mocks base method.
func (m *MockRequestValidation) MultiGetSubjects(req *classroom.MultiGetSubjectsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetSubjects", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultiGetSubjects indicates an expected call of MultiGetSubjects.
func (mr *MockRequestValidationMockRecorder) MultiGetSubjects(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetSubjects", reflect.TypeOf((*MockRequestValidation)(nil).MultiGetSubjects), req)
}

// MultiGetTeacherSubjects mocks base method.
func (m *MockRequestValidation) MultiGetTeacherSubjects(req *classroom.MultiGetTeacherSubjectsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetTeacherSubjects", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultiGetTeacherSubjects indicates an expected call of MultiGetTeacherSubjects.
func (mr *MockRequestValidationMockRecorder) MultiGetTeacherSubjects(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetTeacherSubjects", reflect.TypeOf((*MockRequestValidation)(nil).MultiGetTeacherSubjects), req)
}

// UpdateRoomsTotal mocks base method.
func (m *MockRequestValidation) UpdateRoomsTotal(req *classroom.UpdateRoomsTotalRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomsTotal", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoomsTotal indicates an expected call of UpdateRoomsTotal.
func (mr *MockRequestValidationMockRecorder) UpdateRoomsTotal(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomsTotal", reflect.TypeOf((*MockRequestValidation)(nil).UpdateRoomsTotal), req)
}

// UpdateSchedules mocks base method.
func (m *MockRequestValidation) UpdateSchedules(req *classroom.UpdateSchedulesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedules", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchedules indicates an expected call of UpdateSchedules.
func (mr *MockRequestValidationMockRecorder) UpdateSchedules(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedules", reflect.TypeOf((*MockRequestValidation)(nil).UpdateSchedules), req)
}

// UpdateSubject mocks base method.
func (m *MockRequestValidation) UpdateSubject(req *classroom.UpdateSubjectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubject", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubject indicates an expected call of UpdateSubject.
func (mr *MockRequestValidationMockRecorder) UpdateSubject(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubject", reflect.TypeOf((*MockRequestValidation)(nil).UpdateSubject), req)
}

// UpsertStudentSubject mocks base method.
func (m *MockRequestValidation) UpsertStudentSubject(req *classroom.UpsertStudentSubjectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertStudentSubject", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertStudentSubject indicates an expected call of UpsertStudentSubject.
func (mr *MockRequestValidationMockRecorder) UpsertStudentSubject(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStudentSubject", reflect.TypeOf((*MockRequestValidation)(nil).UpsertStudentSubject), req)
}

// UpsertTeacherSubject mocks base method.
func (m *MockRequestValidation) UpsertTeacherSubject(req *classroom.UpsertTeacherSubjectRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertTeacherSubject", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertTeacherSubject indicates an expected call of UpsertTeacherSubject.
func (mr *MockRequestValidationMockRecorder) UpsertTeacherSubject(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertTeacherSubject", reflect.TypeOf((*MockRequestValidation)(nil).UpsertTeacherSubject), req)
}
