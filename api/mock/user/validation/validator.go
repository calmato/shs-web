// Code generated by MockGen. DO NOT EDIT.
// Source: validator.go

// Package mock_validation is a generated GoMock package.
package mock_validation

import (
	reflect "reflect"

	user "github.com/calmato/shs-web/api/proto/user"
	gomock "github.com/golang/mock/gomock"
)

// MockRequestValidation is a mock of RequestValidation interface.
type MockRequestValidation struct {
	ctrl     *gomock.Controller
	recorder *MockRequestValidationMockRecorder
}

// MockRequestValidationMockRecorder is the mock recorder for MockRequestValidation.
type MockRequestValidationMockRecorder struct {
	mock *MockRequestValidation
}

// NewMockRequestValidation creates a new mock instance.
func NewMockRequestValidation(ctrl *gomock.Controller) *MockRequestValidation {
	mock := &MockRequestValidation{ctrl: ctrl}
	mock.recorder = &MockRequestValidationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestValidation) EXPECT() *MockRequestValidationMockRecorder {
	return m.recorder
}

// CreateStudent mocks base method.
func (m *MockRequestValidation) CreateStudent(req *user.CreateStudentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockRequestValidationMockRecorder) CreateStudent(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockRequestValidation)(nil).CreateStudent), req)
}

// CreateTeacher mocks base method.
func (m *MockRequestValidation) CreateTeacher(req *user.CreateTeacherRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeacher", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTeacher indicates an expected call of CreateTeacher.
func (mr *MockRequestValidationMockRecorder) CreateTeacher(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeacher", reflect.TypeOf((*MockRequestValidation)(nil).CreateTeacher), req)
}

// DeleteStudent mocks base method.
func (m *MockRequestValidation) DeleteStudent(req *user.DeleteStudentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudent", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudent indicates an expected call of DeleteStudent.
func (mr *MockRequestValidationMockRecorder) DeleteStudent(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudent", reflect.TypeOf((*MockRequestValidation)(nil).DeleteStudent), req)
}

// DeleteTeacher mocks base method.
func (m *MockRequestValidation) DeleteTeacher(req *user.DeleteTeacherRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeacher", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeacher indicates an expected call of DeleteTeacher.
func (mr *MockRequestValidationMockRecorder) DeleteTeacher(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeacher", reflect.TypeOf((*MockRequestValidation)(nil).DeleteTeacher), req)
}

// GetStudent mocks base method.
func (m *MockRequestValidation) GetStudent(req *user.GetStudentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockRequestValidationMockRecorder) GetStudent(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockRequestValidation)(nil).GetStudent), req)
}

// GetTeacher mocks base method.
func (m *MockRequestValidation) GetTeacher(req *user.GetTeacherRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacher", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTeacher indicates an expected call of GetTeacher.
func (mr *MockRequestValidationMockRecorder) GetTeacher(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacher", reflect.TypeOf((*MockRequestValidation)(nil).GetTeacher), req)
}

// ListStudents mocks base method.
func (m *MockRequestValidation) ListStudents(req *user.ListStudentsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudents", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListStudents indicates an expected call of ListStudents.
func (mr *MockRequestValidationMockRecorder) ListStudents(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudents", reflect.TypeOf((*MockRequestValidation)(nil).ListStudents), req)
}

// ListTeachers mocks base method.
func (m *MockRequestValidation) ListTeachers(req *user.ListTeachersRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeachers", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTeachers indicates an expected call of ListTeachers.
func (mr *MockRequestValidationMockRecorder) ListTeachers(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeachers", reflect.TypeOf((*MockRequestValidation)(nil).ListTeachers), req)
}

// UpdateTeacherMail mocks base method.
func (m *MockRequestValidation) UpdateTeacherMail(req *user.UpdateTeacherMailRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeacherMail", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeacherMail indicates an expected call of UpdateTeacherMail.
func (mr *MockRequestValidationMockRecorder) UpdateTeacherMail(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeacherMail", reflect.TypeOf((*MockRequestValidation)(nil).UpdateTeacherMail), req)
}

// UpdateTeacherPassword mocks base method.
func (m *MockRequestValidation) UpdateTeacherPassword(req *user.UpdateTeacherPasswordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeacherPassword", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeacherPassword indicates an expected call of UpdateTeacherPassword.
func (mr *MockRequestValidationMockRecorder) UpdateTeacherPassword(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeacherPassword", reflect.TypeOf((*MockRequestValidation)(nil).UpdateTeacherPassword), req)
}

// UpdateTeacherRole mocks base method.
func (m *MockRequestValidation) UpdateTeacherRole(req *user.UpdateTeacherRoleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeacherRole", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeacherRole indicates an expected call of UpdateTeacherRole.
func (mr *MockRequestValidationMockRecorder) UpdateTeacherRole(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeacherRole", reflect.TypeOf((*MockRequestValidation)(nil).UpdateTeacherRole), req)
}
