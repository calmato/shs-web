name: '[Backend] Build and Deploy (Messenger Service)'
on:
  push:
    branches:
    - 'main'
    paths:
    - '.github/workflows/cd-api-messenger-for-main.yaml'
    - 'api/cmd/messenger/**'
    - 'api/config/messenger/**'
    - 'api/internal/messenger/**'
    - 'api/pkg/**'
    - 'api/proto/messenger/**'
    - 'infra/docker/api/messenger/**'
    - 'infra/kubernetes/**'

env:
  ARTIFACT_TAG: ${{ github.sha }}
  ### For Artifact Registry
  GCR_REGION: ${{ secrets.GCR_REGION }}
  GCR_LOCATION: ${{ secrets.GCR_LOCATION }}
  GCR_PROJECT_ID: ${{ secrets.GCR_PROJECT_ID }}
  GCR_REPOSITORY: ${{ secrets.GCR_REPOSITORY }}
  GCR_IMAGE_NAME_SERVER: messenger-api
  GCR_IMAGE_NAME_WORKER: messenger-notifier
  GCR_IMAGE_TAG: ${{ github.sha }}
  ### For Cloud Run and GKE
  GCP_PROJECT_ID: ${{ secrets.DEV_GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.DEV_GCP_REGION }}
  ### For Cloud Run only
  # CLOUD_RUN_NAME: messenger-api
  ### For GKE only
  # GKE_ZONE: ${{ secrets.DEV_GKE_ZONE }}
  # GKE_CLUSTER_NAME: ${{ secrets.DEV_GKE_CLUSTER_NAME }}
  # GKE_DEPLOYMENT_NAME: messenger-api

jobs:
  deploy_container_image:
    name: Deploy container image
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
        working-directory: .
    strategy:
      matrix:
        os: [ubuntu-latest] # exclude: macos-latest, windows-latest
        golang: ['^1.17.2']
        protobuf: ['3.x']

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Use Golang ${{ matrix.golang }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.golang }}

    # https://github.com/marketplace/actions/setup-protoc
    - name: Use Protobuf ${{ matrix.protobuf }}
      uses: arduino/setup-protoc@v1
      with:
        version: ${{ matrix.protobuf }}

    - name: Make cache directory
      run: mkdir -p ~/go/pkg/mod

    - name: Setup
      working-directory: ./api
      run: make setup

    - name: Protoc
      working-directory: ./api
      run: make protoc

    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download modules
      working-directory: ./api
      if: steps.cache.outputs.cache-hit != 'true'
      run: go mod download

    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        service_account_email: ${{ secrets.GCR_SA_EMAIL }}
        service_account_key: ${{ secrets.GCR_SA_KEY }}
        export_default_credentials: true

    - name: Set GCR_REGISTRY
      run: |
        echo "GCR_REGISTRY=${GCR_LOCATION}-docker.pkg.dev" >> $GITHUB_ENV

    - name: Set GCR_IMAGE_PATH
      run: |
        echo "GCR_IMAGE_SERVER_PATH=${GCR_REGISTRY}/${GCR_PROJECT_ID}/${GCR_REPOSITORY}/${GCR_IMAGE_NAME_SERVER}" >> $GITHUB_ENV
        echo "GCR_IMAGE_WORKER_PATH=${GCR_REGISTRY}/${GCR_PROJECT_ID}/${GCR_REPOSITORY}/${GCR_IMAGE_NAME_WORKER}" >> $GITHUB_ENV

    - name: Configure gcloud
      run: |
        gcloud config set project ${GCR_PROJECT_ID}
        gcloud config set run/platform managed
        gcloud config set run/region ${GCR_REGION}
        gcloud auth configure-docker ${GCR_REGISTRY}

    # https://cloud.google.com/artifact-registry/docs/docker/pushing-and-pulling?hl=ja#tag
    - name: Docker Build
      run: |
        docker build -f ./infra/docker/api/messenger/server/Dockerfile -t ${GCR_IMAGE_SERVER_PATH} .
        docker build -f ./infra/docker/api/messenger/notifier/Dockerfile -t ${GCR_IMAGE_WORKER_PATH} .

    - name: Attached Tag
      run: |
        docker tag ${GCR_IMAGE_SERVER_PATH} ${GCR_IMAGE_SERVER_PATH}:latest
        docker tag ${GCR_IMAGE_SERVER_PATH} ${GCR_IMAGE_SERVER_PATH}:${GCR_IMAGE_TAG}
        docker tag ${GCR_IMAGE_WORKER_PATH} ${GCR_IMAGE_WORKER_PATH}:latest
        docker tag ${GCR_IMAGE_WORKER_PATH} ${GCR_IMAGE_WORKER_PATH}:${GCR_IMAGE_TAG}

    - name: Push Artifact Registry in Google Cloud Platform
      run: |
        docker push ${GCR_IMAGE_SERVER_PATH}
        docker push ${GCR_IMAGE_WORKER_PATH}
